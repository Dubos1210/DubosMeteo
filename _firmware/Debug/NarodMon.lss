
NarodMon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00001a28  00001abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000125  00800146  00800146  00001ba2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030a7  00000000  00000000  00001cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  00004d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e4d  00000000  00000000  00005667  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000030c  00000000  00000000  000064b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d9  00000000  00000000  000067c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001eb0  00000000  00000000  00006c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00008b49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e8 e2       	ldi	r30, 0x28	; 40
      3a:	fa e1       	ldi	r31, 0x1A	; 26
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a6 34       	cpi	r26, 0x46	; 70
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	22 e0       	ldi	r18, 0x02	; 2
      4a:	a6 e4       	ldi	r26, 0x46	; 70
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ab 36       	cpi	r26, 0x6B	; 107
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	ba d7       	rcall	.+3956   	; 0xfce <main>
      5a:	e4 cc       	rjmp	.-1592   	; 0xfffffa24 <__eeprom_end+0xff7efa24>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <BMP180_init>:

double BMP180_UP, BMP180_UT;

uint8_t UART_buff[16];	//DEBUG

uint8_t BMP180_init(void) {
      5e:	4f 92       	push	r4
      60:	5f 92       	push	r5
      62:	6f 92       	push	r6
      64:	7f 92       	push	r7
      66:	8f 92       	push	r8
      68:	9f 92       	push	r9
      6a:	af 92       	push	r10
      6c:	bf 92       	push	r11
      6e:	cf 92       	push	r12
      70:	df 92       	push	r13
      72:	ef 92       	push	r14
      74:	ff 92       	push	r15
      76:	0f 93       	push	r16
      78:	1f 93       	push	r17
      7a:	cf 93       	push	r28
      7c:	df 93       	push	r29
	//Чтение ID чипа (проверка связи)
	I2C_read(BMP180_ADDR, BMP180_DEVICE_ID, &BMP180_buffer, 1);
      7e:	21 e0       	ldi	r18, 0x01	; 1
      80:	49 e5       	ldi	r20, 0x59	; 89
      82:	51 e0       	ldi	r21, 0x01	; 1
      84:	60 ed       	ldi	r22, 0xD0	; 208
      86:	8e ee       	ldi	r24, 0xEE	; 238
      88:	76 d4       	rcall	.+2284   	; 0x976 <I2C_read>
	if(BMP180_buffer[0] != BMP180_ID) {
      8a:	80 91 59 01 	lds	r24, 0x0159
      8e:	85 35       	cpi	r24, 0x55	; 85
      90:	09 f0       	breq	.+2      	; 0x94 <BMP180_init+0x36>
      92:	c7 c1       	rjmp	.+910    	; 0x422 <BMP180_init+0x3c4>
		return 0;
	}
			
	//Чтение калибровочных констант
	
	I2C_read(BMP180_ADDR, 0xAA, &BMP180_buffer, 2);
      94:	22 e0       	ldi	r18, 0x02	; 2
      96:	49 e5       	ldi	r20, 0x59	; 89
      98:	51 e0       	ldi	r21, 0x01	; 1
      9a:	6a ea       	ldi	r22, 0xAA	; 170
      9c:	8e ee       	ldi	r24, 0xEE	; 238
      9e:	6b d4       	rcall	.+2262   	; 0x976 <I2C_read>
	BMP180_AC1 = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
      a0:	09 e5       	ldi	r16, 0x59	; 89
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	f8 01       	movw	r30, r16
      a6:	80 81       	ld	r24, Z
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	98 2f       	mov	r25, r24
      ac:	88 27       	eor	r24, r24
      ae:	ca e5       	ldi	r28, 0x5A	; 90
      b0:	d1 e0       	ldi	r29, 0x01	; 1
      b2:	28 81       	ld	r18, Y
      b4:	82 0f       	add	r24, r18
      b6:	91 1d       	adc	r25, r1
      b8:	90 93 a9 01 	sts	0x01A9, r25
      bc:	80 93 a8 01 	sts	0x01A8, r24
	
	I2C_read(BMP180_ADDR, 0xAC, &BMP180_buffer, 2);
      c0:	22 e0       	ldi	r18, 0x02	; 2
      c2:	a8 01       	movw	r20, r16
      c4:	6c ea       	ldi	r22, 0xAC	; 172
      c6:	8e ee       	ldi	r24, 0xEE	; 238
      c8:	56 d4       	rcall	.+2220   	; 0x976 <I2C_read>
	BMP180_AC2 = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
      ca:	f8 01       	movw	r30, r16
      cc:	80 81       	ld	r24, Z
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	98 2f       	mov	r25, r24
      d2:	88 27       	eor	r24, r24
      d4:	28 81       	ld	r18, Y
      d6:	82 0f       	add	r24, r18
      d8:	91 1d       	adc	r25, r1
      da:	90 93 67 01 	sts	0x0167, r25
      de:	80 93 66 01 	sts	0x0166, r24
	
	I2C_read(BMP180_ADDR, 0xAE, &BMP180_buffer, 2);
      e2:	22 e0       	ldi	r18, 0x02	; 2
      e4:	a8 01       	movw	r20, r16
      e6:	6e ea       	ldi	r22, 0xAE	; 174
      e8:	8e ee       	ldi	r24, 0xEE	; 238
      ea:	45 d4       	rcall	.+2186   	; 0x976 <I2C_read>
	BMP180_AC3 = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
      ec:	f8 01       	movw	r30, r16
      ee:	80 81       	ld	r24, Z
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	98 2f       	mov	r25, r24
      f4:	88 27       	eor	r24, r24
      f6:	28 81       	ld	r18, Y
      f8:	82 0f       	add	r24, r18
      fa:	91 1d       	adc	r25, r1
      fc:	90 93 a1 01 	sts	0x01A1, r25
     100:	80 93 a0 01 	sts	0x01A0, r24
	
	I2C_read(BMP180_ADDR, 0xB0, &BMP180_buffer, 2);
     104:	22 e0       	ldi	r18, 0x02	; 2
     106:	a8 01       	movw	r20, r16
     108:	60 eb       	ldi	r22, 0xB0	; 176
     10a:	8e ee       	ldi	r24, 0xEE	; 238
     10c:	34 d4       	rcall	.+2152   	; 0x976 <I2C_read>
	BMP180_AC4 = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     10e:	f8 01       	movw	r30, r16
     110:	80 81       	ld	r24, Z
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	98 2f       	mov	r25, r24
     116:	88 27       	eor	r24, r24
     118:	28 81       	ld	r18, Y
     11a:	82 0f       	add	r24, r18
     11c:	91 1d       	adc	r25, r1
     11e:	90 93 9f 01 	sts	0x019F, r25
     122:	80 93 9e 01 	sts	0x019E, r24
	
	I2C_read(BMP180_ADDR, 0xB2, &BMP180_buffer, 2);
     126:	22 e0       	ldi	r18, 0x02	; 2
     128:	a8 01       	movw	r20, r16
     12a:	62 eb       	ldi	r22, 0xB2	; 178
     12c:	8e ee       	ldi	r24, 0xEE	; 238
     12e:	23 d4       	rcall	.+2118   	; 0x976 <I2C_read>
	BMP180_AC5 = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     130:	f8 01       	movw	r30, r16
     132:	80 81       	ld	r24, Z
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	98 2f       	mov	r25, r24
     138:	88 27       	eor	r24, r24
     13a:	28 81       	ld	r18, Y
     13c:	82 0f       	add	r24, r18
     13e:	91 1d       	adc	r25, r1
     140:	90 93 79 01 	sts	0x0179, r25
     144:	80 93 78 01 	sts	0x0178, r24
	
	I2C_read(BMP180_ADDR, 0xB4, &BMP180_buffer, 2);
     148:	22 e0       	ldi	r18, 0x02	; 2
     14a:	a8 01       	movw	r20, r16
     14c:	64 eb       	ldi	r22, 0xB4	; 180
     14e:	8e ee       	ldi	r24, 0xEE	; 238
     150:	12 d4       	rcall	.+2084   	; 0x976 <I2C_read>
	BMP180_AC6 = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     152:	f8 01       	movw	r30, r16
     154:	80 81       	ld	r24, Z
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	98 2f       	mov	r25, r24
     15a:	88 27       	eor	r24, r24
     15c:	28 81       	ld	r18, Y
     15e:	82 0f       	add	r24, r18
     160:	91 1d       	adc	r25, r1
     162:	90 93 7f 01 	sts	0x017F, r25
     166:	80 93 7e 01 	sts	0x017E, r24
	
	I2C_read(BMP180_ADDR, 0xB6, &BMP180_buffer, 2);
     16a:	22 e0       	ldi	r18, 0x02	; 2
     16c:	a8 01       	movw	r20, r16
     16e:	66 eb       	ldi	r22, 0xB6	; 182
     170:	8e ee       	ldi	r24, 0xEE	; 238
     172:	01 d4       	rcall	.+2050   	; 0x976 <I2C_read>
	BMP180_B1 = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     174:	f8 01       	movw	r30, r16
     176:	80 81       	ld	r24, Z
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	98 2f       	mov	r25, r24
     17c:	88 27       	eor	r24, r24
     17e:	28 81       	ld	r18, Y
     180:	82 0f       	add	r24, r18
     182:	91 1d       	adc	r25, r1
     184:	90 93 85 01 	sts	0x0185, r25
     188:	80 93 84 01 	sts	0x0184, r24
	
	I2C_read(BMP180_ADDR, 0xB8, &BMP180_buffer, 2);
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a8 01       	movw	r20, r16
     190:	68 eb       	ldi	r22, 0xB8	; 184
     192:	8e ee       	ldi	r24, 0xEE	; 238
     194:	f0 d3       	rcall	.+2016   	; 0x976 <I2C_read>
	BMP180_B2 = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     196:	f8 01       	movw	r30, r16
     198:	80 81       	ld	r24, Z
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	98 2f       	mov	r25, r24
     19e:	88 27       	eor	r24, r24
     1a0:	28 81       	ld	r18, Y
     1a2:	82 0f       	add	r24, r18
     1a4:	91 1d       	adc	r25, r1
     1a6:	90 93 af 01 	sts	0x01AF, r25
     1aa:	80 93 ae 01 	sts	0x01AE, r24
	
	I2C_read(BMP180_ADDR, 0xBA, &BMP180_buffer, 2);
     1ae:	22 e0       	ldi	r18, 0x02	; 2
     1b0:	a8 01       	movw	r20, r16
     1b2:	6a eb       	ldi	r22, 0xBA	; 186
     1b4:	8e ee       	ldi	r24, 0xEE	; 238
     1b6:	df d3       	rcall	.+1982   	; 0x976 <I2C_read>
	BMP180_MB = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     1b8:	f8 01       	movw	r30, r16
     1ba:	80 81       	ld	r24, Z
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	98 2f       	mov	r25, r24
     1c0:	88 27       	eor	r24, r24
     1c2:	28 81       	ld	r18, Y
     1c4:	82 0f       	add	r24, r18
     1c6:	91 1d       	adc	r25, r1
     1c8:	90 93 54 01 	sts	0x0154, r25
     1cc:	80 93 53 01 	sts	0x0153, r24
	
	I2C_read(BMP180_ADDR, 0xBC, &BMP180_buffer, 2);
     1d0:	22 e0       	ldi	r18, 0x02	; 2
     1d2:	a8 01       	movw	r20, r16
     1d4:	6c eb       	ldi	r22, 0xBC	; 188
     1d6:	8e ee       	ldi	r24, 0xEE	; 238
     1d8:	ce d3       	rcall	.+1948   	; 0x976 <I2C_read>
	BMP180_MC = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     1da:	f8 01       	movw	r30, r16
     1dc:	80 81       	ld	r24, Z
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	98 2f       	mov	r25, r24
     1e2:	88 27       	eor	r24, r24
     1e4:	28 81       	ld	r18, Y
     1e6:	82 0f       	add	r24, r18
     1e8:	91 1d       	adc	r25, r1
     1ea:	90 93 a7 01 	sts	0x01A7, r25
     1ee:	80 93 a6 01 	sts	0x01A6, r24
	
	I2C_read(BMP180_ADDR, 0xBE, &BMP180_buffer, 2);
     1f2:	22 e0       	ldi	r18, 0x02	; 2
     1f4:	a8 01       	movw	r20, r16
     1f6:	6e eb       	ldi	r22, 0xBE	; 190
     1f8:	8e ee       	ldi	r24, 0xEE	; 238
     1fa:	bd d3       	rcall	.+1914   	; 0x976 <I2C_read>
	BMP180_MD = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     1fc:	f8 01       	movw	r30, r16
     1fe:	60 81       	ld	r22, Z
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	76 2f       	mov	r23, r22
     204:	66 27       	eor	r22, r22
     206:	88 81       	ld	r24, Y
     208:	eb 01       	movw	r28, r22
     20a:	c8 0f       	add	r28, r24
     20c:	d1 1d       	adc	r29, r1
     20e:	d0 93 65 01 	sts	0x0165, r29
     212:	c0 93 64 01 	sts	0x0164, r28
	
	// Compute floating-point polynominals:
		
	double c3, c4, b1;

	c3 = 160.0 * pow(2,-15) * BMP180_AC3;
     216:	60 91 a0 01 	lds	r22, 0x01A0
     21a:	70 91 a1 01 	lds	r23, 0x01A1
     21e:	88 27       	eor	r24, r24
     220:	77 fd       	sbrc	r23, 7
     222:	80 95       	com	r24
     224:	98 2f       	mov	r25, r24
     226:	bb da       	rcall	.-2698   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	40 ea       	ldi	r20, 0xA0	; 160
     22e:	5b e3       	ldi	r21, 0x3B	; 59
     230:	42 db       	rcall	.-2428   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     232:	2b 01       	movw	r4, r22
     234:	3c 01       	movw	r6, r24
	c4 = pow(10,-3) * pow(2,-15) * BMP180_AC4;
     236:	60 91 9e 01 	lds	r22, 0x019E
     23a:	70 91 9f 01 	lds	r23, 0x019F
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	ab da       	rcall	.-2730   	; 0xfffff79a <__eeprom_end+0xff7ef79a>
     244:	2f e6       	ldi	r18, 0x6F	; 111
     246:	32 e1       	ldi	r19, 0x12	; 18
     248:	43 e0       	ldi	r20, 0x03	; 3
     24a:	53 e3       	ldi	r21, 0x33	; 51
     24c:	34 db       	rcall	.-2456   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     24e:	6b 01       	movw	r12, r22
     250:	7c 01       	movw	r14, r24
	b1 = pow(160,2) * pow(2,-30) * BMP180_B1;
     252:	60 91 84 01 	lds	r22, 0x0184
     256:	70 91 85 01 	lds	r23, 0x0185
     25a:	88 27       	eor	r24, r24
     25c:	77 fd       	sbrc	r23, 7
     25e:	80 95       	com	r24
     260:	98 2f       	mov	r25, r24
     262:	9d da       	rcall	.-2758   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	48 ec       	ldi	r20, 0xC8	; 200
     26a:	57 e3       	ldi	r21, 0x37	; 55
     26c:	24 db       	rcall	.-2488   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     26e:	4b 01       	movw	r8, r22
     270:	5c 01       	movw	r10, r24
	c5 = (pow(2,-15) / 160) * BMP180_AC5;
     272:	60 91 78 01 	lds	r22, 0x0178
     276:	70 91 79 01 	lds	r23, 0x0179
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	8d da       	rcall	.-2790   	; 0xfffff79a <__eeprom_end+0xff7ef79a>
     280:	2d ec       	ldi	r18, 0xCD	; 205
     282:	3c ec       	ldi	r19, 0xCC	; 204
     284:	4c e4       	ldi	r20, 0x4C	; 76
     286:	54 e3       	ldi	r21, 0x34	; 52
     288:	16 db       	rcall	.-2516   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     28a:	60 93 96 01 	sts	0x0196, r22
     28e:	70 93 97 01 	sts	0x0197, r23
     292:	80 93 98 01 	sts	0x0198, r24
     296:	90 93 99 01 	sts	0x0199, r25
	c6 = BMP180_AC6;
     29a:	60 91 7e 01 	lds	r22, 0x017E
     29e:	70 91 7f 01 	lds	r23, 0x017F
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	79 da       	rcall	.-2830   	; 0xfffff79a <__eeprom_end+0xff7ef79a>
     2a8:	60 93 55 01 	sts	0x0155, r22
     2ac:	70 93 56 01 	sts	0x0156, r23
     2b0:	80 93 57 01 	sts	0x0157, r24
     2b4:	90 93 58 01 	sts	0x0158, r25
	mc = (pow(2,11) / pow(160,2)) * BMP180_MC;
     2b8:	60 91 a6 01 	lds	r22, 0x01A6
     2bc:	70 91 a7 01 	lds	r23, 0x01A7
     2c0:	88 27       	eor	r24, r24
     2c2:	77 fd       	sbrc	r23, 7
     2c4:	80 95       	com	r24
     2c6:	98 2f       	mov	r25, r24
     2c8:	6a da       	rcall	.-2860   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     2ca:	2a e0       	ldi	r18, 0x0A	; 10
     2cc:	37 ed       	ldi	r19, 0xD7	; 215
     2ce:	43 ea       	ldi	r20, 0xA3	; 163
     2d0:	5d e3       	ldi	r21, 0x3D	; 61
     2d2:	f1 da       	rcall	.-2590   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     2d4:	60 93 9a 01 	sts	0x019A, r22
     2d8:	70 93 9b 01 	sts	0x019B, r23
     2dc:	80 93 9c 01 	sts	0x019C, r24
     2e0:	90 93 9d 01 	sts	0x019D, r25
	md = BMP180_MD / 160.0;
     2e4:	be 01       	movw	r22, r28
     2e6:	88 27       	eor	r24, r24
     2e8:	77 fd       	sbrc	r23, 7
     2ea:	80 95       	com	r24
     2ec:	98 2f       	mov	r25, r24
     2ee:	57 da       	rcall	.-2898   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e2       	ldi	r20, 0x20	; 32
     2f6:	53 e4       	ldi	r21, 0x43	; 67
     2f8:	b7 d9       	rcall	.-3218   	; 0xfffff668 <__eeprom_end+0xff7ef668>
     2fa:	60 93 92 01 	sts	0x0192, r22
     2fe:	70 93 93 01 	sts	0x0193, r23
     302:	80 93 94 01 	sts	0x0194, r24
     306:	90 93 95 01 	sts	0x0195, r25
	x0 = BMP180_AC1;
     30a:	60 91 a8 01 	lds	r22, 0x01A8
     30e:	70 91 a9 01 	lds	r23, 0x01A9
     312:	88 27       	eor	r24, r24
     314:	77 fd       	sbrc	r23, 7
     316:	80 95       	com	r24
     318:	98 2f       	mov	r25, r24
     31a:	41 da       	rcall	.-2942   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     31c:	60 93 8a 01 	sts	0x018A, r22
     320:	70 93 8b 01 	sts	0x018B, r23
     324:	80 93 8c 01 	sts	0x018C, r24
     328:	90 93 8d 01 	sts	0x018D, r25
	x1 = 160.0 * pow(2,-13) * BMP180_AC2;
     32c:	60 91 66 01 	lds	r22, 0x0166
     330:	70 91 67 01 	lds	r23, 0x0167
     334:	88 27       	eor	r24, r24
     336:	77 fd       	sbrc	r23, 7
     338:	80 95       	com	r24
     33a:	98 2f       	mov	r25, r24
     33c:	30 da       	rcall	.-2976   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 ea       	ldi	r20, 0xA0	; 160
     344:	5c e3       	ldi	r21, 0x3C	; 60
     346:	b7 da       	rcall	.-2706   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     348:	60 93 a2 01 	sts	0x01A2, r22
     34c:	70 93 a3 01 	sts	0x01A3, r23
     350:	80 93 a4 01 	sts	0x01A4, r24
     354:	90 93 a5 01 	sts	0x01A5, r25
	x2 = pow(160,2) * pow(2,-25) * BMP180_B2;
     358:	60 91 ae 01 	lds	r22, 0x01AE
     35c:	70 91 af 01 	lds	r23, 0x01AF
     360:	88 27       	eor	r24, r24
     362:	77 fd       	sbrc	r23, 7
     364:	80 95       	com	r24
     366:	98 2f       	mov	r25, r24
     368:	1a da       	rcall	.-3020   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	48 e4       	ldi	r20, 0x48	; 72
     370:	5a e3       	ldi	r21, 0x3A	; 58
     372:	a1 da       	rcall	.-2750   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     374:	60 93 86 01 	sts	0x0186, r22
     378:	70 93 87 01 	sts	0x0187, r23
     37c:	80 93 88 01 	sts	0x0188, r24
     380:	90 93 89 01 	sts	0x0189, r25
	y0 = c4 * pow(2,15);
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	57 e4       	ldi	r21, 0x47	; 71
     38c:	c7 01       	movw	r24, r14
     38e:	b6 01       	movw	r22, r12
     390:	92 da       	rcall	.-2780   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     392:	60 93 60 01 	sts	0x0160, r22
     396:	70 93 61 01 	sts	0x0161, r23
     39a:	80 93 62 01 	sts	0x0162, r24
     39e:	90 93 63 01 	sts	0x0163, r25
	y1 = c4 * c3;
     3a2:	a3 01       	movw	r20, r6
     3a4:	92 01       	movw	r18, r4
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	85 da       	rcall	.-2806   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     3ac:	60 93 b0 01 	sts	0x01B0, r22
     3b0:	70 93 b1 01 	sts	0x01B1, r23
     3b4:	80 93 b2 01 	sts	0x01B2, r24
     3b8:	90 93 b3 01 	sts	0x01B3, r25
	y2 = c4 * b1;
     3bc:	a5 01       	movw	r20, r10
     3be:	94 01       	movw	r18, r8
     3c0:	c7 01       	movw	r24, r14
     3c2:	b6 01       	movw	r22, r12
     3c4:	78 da       	rcall	.-2832   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     3c6:	60 93 80 01 	sts	0x0180, r22
     3ca:	70 93 81 01 	sts	0x0181, r23
     3ce:	80 93 82 01 	sts	0x0182, r24
     3d2:	90 93 83 01 	sts	0x0183, r25
	p0 = (3791.0 - 8.0) / 1600.0;
     3d6:	8c ee       	ldi	r24, 0xEC	; 236
     3d8:	91 e5       	ldi	r25, 0x51	; 81
     3da:	a7 e1       	ldi	r26, 0x17	; 23
     3dc:	b0 e4       	ldi	r27, 0x40	; 64
     3de:	80 93 4f 01 	sts	0x014F, r24
     3e2:	90 93 50 01 	sts	0x0150, r25
     3e6:	a0 93 51 01 	sts	0x0151, r26
     3ea:	b0 93 52 01 	sts	0x0152, r27
	p1 = 1.0 - 7357.0 * pow(2,-20);
     3ee:	80 e3       	ldi	r24, 0x30	; 48
     3f0:	94 e3       	ldi	r25, 0x34	; 52
     3f2:	ae e7       	ldi	r26, 0x7E	; 126
     3f4:	bf e3       	ldi	r27, 0x3F	; 63
     3f6:	80 93 8e 01 	sts	0x018E, r24
     3fa:	90 93 8f 01 	sts	0x018F, r25
     3fe:	a0 93 90 01 	sts	0x0190, r26
     402:	b0 93 91 01 	sts	0x0191, r27
	p2 = 3038.0 * 100.0 * pow(2,-36);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	97 e5       	ldi	r25, 0x57	; 87
     40a:	a4 e9       	ldi	r26, 0x94	; 148
     40c:	b6 e3       	ldi	r27, 0x36	; 54
     40e:	80 93 5c 01 	sts	0x015C, r24
     412:	90 93 5d 01 	sts	0x015D, r25
     416:	a0 93 5e 01 	sts	0x015E, r26
     41a:	b0 93 5f 01 	sts	0x015F, r27
		
	return 1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	01 c0       	rjmp	.+2      	; 0x424 <BMP180_init+0x3c6>

uint8_t BMP180_init(void) {
	//Чтение ID чипа (проверка связи)
	I2C_read(BMP180_ADDR, BMP180_DEVICE_ID, &BMP180_buffer, 1);
	if(BMP180_buffer[0] != BMP180_ID) {
		return 0;
     422:	80 e0       	ldi	r24, 0x00	; 0
	p0 = (3791.0 - 8.0) / 1600.0;
	p1 = 1.0 - 7357.0 * pow(2,-20);
	p2 = 3038.0 * 100.0 * pow(2,-36);
		
	return 1;
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	bf 90       	pop	r11
     436:	af 90       	pop	r10
     438:	9f 90       	pop	r9
     43a:	8f 90       	pop	r8
     43c:	7f 90       	pop	r7
     43e:	6f 90       	pop	r6
     440:	5f 90       	pop	r5
     442:	4f 90       	pop	r4
     444:	08 95       	ret

00000446 <BMP180_calculation>:
	I2C_read(BMP180_ADDR, BMP180_REG_RESULT, &BMP180_buffer, 3);
	//BMP180_UP = ((BMP180_buffer[0] << 16) + (BMP180_buffer[1] << 8) + BMP180_buffer[1]) >> (8-BMP180_OSS_S);
	BMP180_UP = (BMP180_buffer[0] * 256.0) + BMP180_buffer[1] + (BMP180_buffer[2]/256.0);
}

void BMP180_calculation (int32_t* temperature, int32_t* pressure) {
     446:	2f 92       	push	r2
     448:	3f 92       	push	r3
     44a:	4f 92       	push	r4
     44c:	5f 92       	push	r5
     44e:	6f 92       	push	r6
     450:	7f 92       	push	r7
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	00 d0       	rcall	.+0      	; 0x46c <__stack+0xd>
     46c:	00 d0       	rcall	.+0      	; 0x46e <__stack+0xf>
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	5c 01       	movw	r10, r24
     474:	1b 01       	movw	r2, r22
		
	return 1;
}

static void inline BMP180_get_ut() {	
	BMP180_buffer[0] = BMP180_COMMAND_TEMPERATURE;
     476:	8e e2       	ldi	r24, 0x2E	; 46
     478:	80 93 59 01 	sts	0x0159, r24
	I2C_write(BMP180_ADDR, BMP180_REG_CONTROL, &BMP180_buffer, 1);
     47c:	21 e0       	ldi	r18, 0x01	; 1
     47e:	49 e5       	ldi	r20, 0x59	; 89
     480:	51 e0       	ldi	r21, 0x01	; 1
     482:	64 ef       	ldi	r22, 0xF4	; 244
     484:	8e ee       	ldi	r24, 0xEE	; 238
     486:	3e d4       	rcall	.+2172   	; 0xd04 <I2C_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     488:	8f e0       	ldi	r24, 0x0F	; 15
     48a:	97 e2       	ldi	r25, 0x27	; 39
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__stack+0x2d>
     490:	00 c0       	rjmp	.+0      	; 0x492 <__stack+0x33>
     492:	00 00       	nop
	_delay_ms(5);
	I2C_read(BMP180_ADDR, BMP180_REG_RESULT, &BMP180_buffer, 2);
     494:	22 e0       	ldi	r18, 0x02	; 2
     496:	49 e5       	ldi	r20, 0x59	; 89
     498:	51 e0       	ldi	r21, 0x01	; 1
     49a:	66 ef       	ldi	r22, 0xF6	; 246
     49c:	8e ee       	ldi	r24, 0xEE	; 238
     49e:	6b d2       	rcall	.+1238   	; 0x976 <I2C_read>
	BMP180_UT = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
     4a0:	09 e5       	ldi	r16, 0x59	; 89
     4a2:	11 e0       	ldi	r17, 0x01	; 1
     4a4:	f8 01       	movw	r30, r16
     4a6:	60 81       	ld	r22, Z
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	76 2f       	mov	r23, r22
     4ac:	66 27       	eor	r22, r22
     4ae:	80 91 5a 01 	lds	r24, 0x015A
     4b2:	68 0f       	add	r22, r24
     4b4:	71 1d       	adc	r23, r1
     4b6:	88 27       	eor	r24, r24
     4b8:	77 fd       	sbrc	r23, 7
     4ba:	80 95       	com	r24
     4bc:	98 2f       	mov	r25, r24
     4be:	6f d9       	rcall	.-3362   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     4c0:	60 93 7a 01 	sts	0x017A, r22
     4c4:	70 93 7b 01 	sts	0x017B, r23
     4c8:	80 93 7c 01 	sts	0x017C, r24
     4cc:	90 93 7d 01 	sts	0x017D, r25
void BMP180_calculation (int32_t* temperature, int32_t* pressure) {
	double a, s, x, y, z;
	int32_t t, p;
	
	BMP180_get_ut();
	a = c5 * (BMP180_UT - c6);
     4d0:	20 91 55 01 	lds	r18, 0x0155
     4d4:	30 91 56 01 	lds	r19, 0x0156
     4d8:	40 91 57 01 	lds	r20, 0x0157
     4dc:	50 91 58 01 	lds	r21, 0x0158
     4e0:	5e d8       	rcall	.-3908   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     4e2:	20 91 96 01 	lds	r18, 0x0196
     4e6:	30 91 97 01 	lds	r19, 0x0197
     4ea:	40 91 98 01 	lds	r20, 0x0198
     4ee:	50 91 99 01 	lds	r21, 0x0199
     4f2:	e1 d9       	rcall	.-3134   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     4f4:	6b 01       	movw	r12, r22
     4f6:	7c 01       	movw	r14, r24
	t = (a + (mc / (a + md))) * 10;
     4f8:	20 91 92 01 	lds	r18, 0x0192
     4fc:	30 91 93 01 	lds	r19, 0x0193
     500:	40 91 94 01 	lds	r20, 0x0194
     504:	50 91 95 01 	lds	r21, 0x0195
     508:	4b d8       	rcall	.-3946   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
     50a:	9b 01       	movw	r18, r22
     50c:	ac 01       	movw	r20, r24
     50e:	60 91 9a 01 	lds	r22, 0x019A
     512:	70 91 9b 01 	lds	r23, 0x019B
     516:	80 91 9c 01 	lds	r24, 0x019C
     51a:	90 91 9d 01 	lds	r25, 0x019D
     51e:	a4 d8       	rcall	.-3768   	; 0xfffff668 <__eeprom_end+0xff7ef668>
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	3d d8       	rcall	.-3974   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e2       	ldi	r20, 0x20	; 32
     52c:	51 e4       	ldi	r21, 0x41	; 65
     52e:	c3 d9       	rcall	.-3194   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     530:	03 d9       	rcall	.-3578   	; 0xfffff738 <__eeprom_end+0xff7ef738>
     532:	6b 01       	movw	r12, r22
     534:	7c 01       	movw	r14, r24
	*temperature = t;
     536:	f5 01       	movw	r30, r10
     538:	60 83       	st	Z, r22
     53a:	71 83       	std	Z+1, r23	; 0x01
     53c:	82 83       	std	Z+2, r24	; 0x02
     53e:	93 83       	std	Z+3, r25	; 0x03
	I2C_read(BMP180_ADDR, BMP180_REG_RESULT, &BMP180_buffer, 2);
	BMP180_UT = (BMP180_buffer[0] << 8) + BMP180_buffer[1];
}

static void inline BMP180_get_up() {
	BMP180_buffer[0] = BMP180_COMMAND_PRESSURE0;
     540:	84 e3       	ldi	r24, 0x34	; 52
     542:	f8 01       	movw	r30, r16
     544:	80 83       	st	Z, r24
	I2C_write(BMP180_ADDR, BMP180_REG_CONTROL, &BMP180_buffer, 1);
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	a8 01       	movw	r20, r16
     54a:	64 ef       	ldi	r22, 0xF4	; 244
     54c:	8e ee       	ldi	r24, 0xEE	; 238
     54e:	da d3       	rcall	.+1972   	; 0xd04 <I2C_write>
     550:	8f e5       	ldi	r24, 0x5F	; 95
     552:	9a ee       	ldi	r25, 0xEA	; 234
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <__stack+0xf5>
     558:	00 c0       	rjmp	.+0      	; 0x55a <__stack+0xfb>
     55a:	00 00       	nop
	_delay_ms(30);
	I2C_read(BMP180_ADDR, BMP180_REG_RESULT, &BMP180_buffer, 3);
     55c:	23 e0       	ldi	r18, 0x03	; 3
     55e:	a8 01       	movw	r20, r16
     560:	66 ef       	ldi	r22, 0xF6	; 246
     562:	8e ee       	ldi	r24, 0xEE	; 238
     564:	08 d2       	rcall	.+1040   	; 0x976 <I2C_read>
	//BMP180_UP = ((BMP180_buffer[0] << 16) + (BMP180_buffer[1] << 8) + BMP180_buffer[1]) >> (8-BMP180_OSS_S);
	BMP180_UP = (BMP180_buffer[0] * 256.0) + BMP180_buffer[1] + (BMP180_buffer[2]/256.0);
     566:	60 91 59 01 	lds	r22, 0x0159
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	16 d9       	rcall	.-3540   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e8       	ldi	r20, 0x80	; 128
     578:	53 e4       	ldi	r21, 0x43	; 67
     57a:	9d d9       	rcall	.-3270   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     57c:	4b 01       	movw	r8, r22
     57e:	5c 01       	movw	r10, r24
     580:	60 91 5a 01 	lds	r22, 0x015A
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	09 d9       	rcall	.-3566   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     58c:	9b 01       	movw	r18, r22
     58e:	ac 01       	movw	r20, r24
     590:	c5 01       	movw	r24, r10
     592:	b4 01       	movw	r22, r8
     594:	05 d8       	rcall	.-4086   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
     596:	4b 01       	movw	r8, r22
     598:	5c 01       	movw	r10, r24
     59a:	60 91 5b 01 	lds	r22, 0x015B
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc d8       	rcall	.-3592   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e8       	ldi	r20, 0x80	; 128
     5ac:	5b e3       	ldi	r21, 0x3B	; 59
     5ae:	83 d9       	rcall	.-3322   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     5b0:	9b 01       	movw	r18, r22
     5b2:	ac 01       	movw	r20, r24
     5b4:	c5 01       	movw	r24, r10
     5b6:	b4 01       	movw	r22, r8
     5b8:	f3 d7       	rcall	.+4070   	; 0x15a0 <__addsf3>
     5ba:	2b 01       	movw	r4, r22
     5bc:	3c 01       	movw	r6, r24
     5be:	60 93 aa 01 	sts	0x01AA, r22
     5c2:	70 93 ab 01 	sts	0x01AB, r23
     5c6:	80 93 ac 01 	sts	0x01AC, r24
     5ca:	90 93 ad 01 	sts	0x01AD, r25
	a = c5 * (BMP180_UT - c6);
	t = (a + (mc / (a + md))) * 10;
	*temperature = t;

	BMP180_get_up();
	s = (t - 250) / 10;
     5ce:	c7 01       	movw	r24, r14
     5d0:	b6 01       	movw	r22, r12
     5d2:	6a 5f       	subi	r22, 0xFA	; 250
     5d4:	71 09       	sbc	r23, r1
     5d6:	81 09       	sbc	r24, r1
     5d8:	91 09       	sbc	r25, r1
     5da:	2a e0       	ldi	r18, 0x0A	; 10
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	ee d9       	rcall	.-3108   	; 0xfffff9c0 <__eeprom_end+0xff7ef9c0>
     5e4:	ca 01       	movw	r24, r20
     5e6:	b9 01       	movw	r22, r18
     5e8:	da d8       	rcall	.-3660   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
     5ea:	6b 01       	movw	r12, r22
     5ec:	7c 01       	movw	r14, r24
	x = (x2 * pow(s,2)) + (x1 * s) + x0;
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	61 d9       	rcall	.-3390   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     5f4:	4b 01       	movw	r8, r22
     5f6:	5c 01       	movw	r10, r24
     5f8:	20 91 86 01 	lds	r18, 0x0186
     5fc:	30 91 87 01 	lds	r19, 0x0187
     600:	40 91 88 01 	lds	r20, 0x0188
     604:	50 91 89 01 	lds	r21, 0x0189
     608:	56 d9       	rcall	.-3412   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     60a:	69 83       	std	Y+1, r22	; 0x01
     60c:	7a 83       	std	Y+2, r23	; 0x02
     60e:	8b 83       	std	Y+3, r24	; 0x03
     610:	9c 83       	std	Y+4, r25	; 0x04
     612:	20 91 a2 01 	lds	r18, 0x01A2
     616:	30 91 a3 01 	lds	r19, 0x01A3
     61a:	40 91 a4 01 	lds	r20, 0x01A4
     61e:	50 91 a5 01 	lds	r21, 0x01A5
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	47 d9       	rcall	.-3442   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	69 81       	ldd	r22, Y+1	; 0x01
     62e:	7a 81       	ldd	r23, Y+2	; 0x02
     630:	8b 81       	ldd	r24, Y+3	; 0x03
     632:	9c 81       	ldd	r25, Y+4	; 0x04
     634:	b5 d7       	rcall	.+3946   	; 0x15a0 <__addsf3>
     636:	20 91 8a 01 	lds	r18, 0x018A
     63a:	30 91 8b 01 	lds	r19, 0x018B
     63e:	40 91 8c 01 	lds	r20, 0x018C
     642:	50 91 8d 01 	lds	r21, 0x018D
     646:	ac d7       	rcall	.+3928   	; 0x15a0 <__addsf3>
     648:	9b 01       	movw	r18, r22
     64a:	ac 01       	movw	r20, r24
	y = (y2 * pow(s,2)) + (y1 * s) + y0;
	z = (BMP180_UP - x) / y;
     64c:	c3 01       	movw	r24, r6
     64e:	b2 01       	movw	r22, r4
     650:	a6 d7       	rcall	.+3916   	; 0x159e <__subsf3>
     652:	2b 01       	movw	r4, r22
     654:	3c 01       	movw	r6, r24
	*temperature = t;

	BMP180_get_up();
	s = (t - 250) / 10;
	x = (x2 * pow(s,2)) + (x1 * s) + x0;
	y = (y2 * pow(s,2)) + (y1 * s) + y0;
     656:	20 91 80 01 	lds	r18, 0x0180
     65a:	30 91 81 01 	lds	r19, 0x0181
     65e:	40 91 82 01 	lds	r20, 0x0182
     662:	50 91 83 01 	lds	r21, 0x0183
     666:	c5 01       	movw	r24, r10
     668:	b4 01       	movw	r22, r8
     66a:	25 d9       	rcall	.-3510   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     66c:	4b 01       	movw	r8, r22
     66e:	5c 01       	movw	r10, r24
     670:	20 91 b0 01 	lds	r18, 0x01B0
     674:	30 91 b1 01 	lds	r19, 0x01B1
     678:	40 91 b2 01 	lds	r20, 0x01B2
     67c:	50 91 b3 01 	lds	r21, 0x01B3
     680:	c7 01       	movw	r24, r14
     682:	b6 01       	movw	r22, r12
     684:	18 d9       	rcall	.-3536   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     686:	9b 01       	movw	r18, r22
     688:	ac 01       	movw	r20, r24
     68a:	c5 01       	movw	r24, r10
     68c:	b4 01       	movw	r22, r8
     68e:	88 d7       	rcall	.+3856   	; 0x15a0 <__addsf3>
     690:	20 91 60 01 	lds	r18, 0x0160
     694:	30 91 61 01 	lds	r19, 0x0161
     698:	40 91 62 01 	lds	r20, 0x0162
     69c:	50 91 63 01 	lds	r21, 0x0163
     6a0:	7f d7       	rcall	.+3838   	; 0x15a0 <__addsf3>
     6a2:	9b 01       	movw	r18, r22
     6a4:	ac 01       	movw	r20, r24
	z = (BMP180_UP - x) / y;
     6a6:	c3 01       	movw	r24, r6
     6a8:	b2 01       	movw	r22, r4
     6aa:	de d7       	rcall	.+4028   	; 0x1668 <__divsf3>
     6ac:	6b 01       	movw	r12, r22
     6ae:	7c 01       	movw	r14, r24
	p = ((p2 * pow(z,2)) + (p1 * z) + p0) * 100;
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	00 d9       	rcall	.-3584   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     6b6:	20 91 5c 01 	lds	r18, 0x015C
     6ba:	30 91 5d 01 	lds	r19, 0x015D
     6be:	40 91 5e 01 	lds	r20, 0x015E
     6c2:	50 91 5f 01 	lds	r21, 0x015F
     6c6:	f7 d8       	rcall	.-3602   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     6c8:	4b 01       	movw	r8, r22
     6ca:	5c 01       	movw	r10, r24
     6cc:	20 91 8e 01 	lds	r18, 0x018E
     6d0:	30 91 8f 01 	lds	r19, 0x018F
     6d4:	40 91 90 01 	lds	r20, 0x0190
     6d8:	50 91 91 01 	lds	r21, 0x0191
     6dc:	c7 01       	movw	r24, r14
     6de:	b6 01       	movw	r22, r12
     6e0:	ea d8       	rcall	.-3628   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     6e2:	9b 01       	movw	r18, r22
     6e4:	ac 01       	movw	r20, r24
     6e6:	c5 01       	movw	r24, r10
     6e8:	b4 01       	movw	r22, r8
     6ea:	5a d7       	rcall	.+3764   	; 0x15a0 <__addsf3>
     6ec:	20 91 4f 01 	lds	r18, 0x014F
     6f0:	30 91 50 01 	lds	r19, 0x0150
     6f4:	40 91 51 01 	lds	r20, 0x0151
     6f8:	50 91 52 01 	lds	r21, 0x0152
     6fc:	51 d7       	rcall	.+3746   	; 0x15a0 <__addsf3>
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	48 ec       	ldi	r20, 0xC8	; 200
     704:	52 e4       	ldi	r21, 0x42	; 66
     706:	d7 d8       	rcall	.-3666   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
     708:	17 d8       	rcall	.-4050   	; 0xfffff738 <__eeprom_end+0xff7ef738>
     70a:	f1 01       	movw	r30, r2
     70c:	60 83       	st	Z, r22
     70e:	71 83       	std	Z+1, r23	; 0x01
     710:	82 83       	std	Z+2, r24	; 0x02
     712:	93 83       	std	Z+3, r25	; 0x03
	*pressure = p;
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	bf 90       	pop	r11
     72e:	af 90       	pop	r10
     730:	9f 90       	pop	r9
     732:	8f 90       	pop	r8
     734:	7f 90       	pop	r7
     736:	6f 90       	pop	r6
     738:	5f 90       	pop	r5
     73a:	4f 90       	pop	r4
     73c:	3f 90       	pop	r3
     73e:	2f 90       	pop	r2
     740:	08 95       	ret

00000742 <DHT11_readByte>:
}

uint8_t DHT11_readByte(void) {
	uint8_t DHT11_counter = 0;
	uint8_t DHT11_data = 0x00;	
	DHT_DDR &=~ (1<<DHT_WIRE);
     742:	8d 98       	cbi	0x11, 5	; 17
	for(int DHT11_i = 7; DHT11_i >= 0; DHT11_i--) {
     744:	27 e0       	ldi	r18, 0x07	; 7
     746:	30 e0       	ldi	r19, 0x00	; 0
	return DHT11_OK;
}

uint8_t DHT11_readByte(void) {
	uint8_t DHT11_counter = 0;
	uint8_t DHT11_data = 0x00;	
     748:	80 e0       	ldi	r24, 0x00	; 0
	DHT_DDR &=~ (1<<DHT_WIRE);
	for(int DHT11_i = 7; DHT11_i >= 0; DHT11_i--) {
		DHT11_counter = 0;
		while(!(DHT_PIN & (1<<DHT_WIRE)) && (DHT11_counter < 10)) {
     74a:	ea e0       	ldi	r30, 0x0A	; 10
			_delay_us(10);
			DHT11_counter++;
		}
		DHT11_counter = 0;
		while((DHT_PIN & (1<<DHT_WIRE)) && (DHT11_counter < 15)) {
     74c:	f0 e0       	ldi	r31, 0x00	; 0
			_delay_us(10);
			DHT11_counter++;
		}
		if(DHT11_counter > 5) {
			DHT11_data += (1<<DHT11_i);
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	20 c0       	rjmp	.+64     	; 0x794 <DHT11_readByte+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     754:	4a e1       	ldi	r20, 0x1A	; 26
     756:	4a 95       	dec	r20
     758:	f1 f7       	brne	.-4      	; 0x756 <DHT11_readByte+0x14>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <DHT11_readByte+0x1a>
	uint8_t DHT11_counter = 0;
	uint8_t DHT11_data = 0x00;	
	DHT_DDR &=~ (1<<DHT_WIRE);
	for(int DHT11_i = 7; DHT11_i >= 0; DHT11_i--) {
		DHT11_counter = 0;
		while(!(DHT_PIN & (1<<DHT_WIRE)) && (DHT11_counter < 10)) {
     75c:	85 99       	sbic	0x10, 5	; 16
     75e:	1e c0       	rjmp	.+60     	; 0x79c <DHT11_readByte+0x5a>
     760:	91 50       	subi	r25, 0x01	; 1
     762:	c1 f7       	brne	.-16     	; 0x754 <DHT11_readByte+0x12>
     764:	1b c0       	rjmp	.+54     	; 0x79c <DHT11_readByte+0x5a>
     766:	4a e1       	ldi	r20, 0x1A	; 26
     768:	4a 95       	dec	r20
     76a:	f1 f7       	brne	.-4      	; 0x768 <DHT11_readByte+0x26>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <DHT11_readByte+0x2c>
			DHT11_counter++;
		}
		DHT11_counter = 0;
		while((DHT_PIN & (1<<DHT_WIRE)) && (DHT11_counter < 15)) {
			_delay_us(10);
			DHT11_counter++;
     76e:	9f 5f       	subi	r25, 0xFF	; 255
		while(!(DHT_PIN & (1<<DHT_WIRE)) && (DHT11_counter < 10)) {
			_delay_us(10);
			DHT11_counter++;
		}
		DHT11_counter = 0;
		while((DHT_PIN & (1<<DHT_WIRE)) && (DHT11_counter < 15)) {
     770:	85 9b       	sbis	0x10, 5	; 16
     772:	03 c0       	rjmp	.+6      	; 0x77a <DHT11_readByte+0x38>
     774:	9f 30       	cpi	r25, 0x0F	; 15
     776:	b9 f7       	brne	.-18     	; 0x766 <DHT11_readByte+0x24>
     778:	02 c0       	rjmp	.+4      	; 0x77e <DHT11_readByte+0x3c>
			_delay_us(10);
			DHT11_counter++;
		}
		if(DHT11_counter > 5) {
     77a:	96 30       	cpi	r25, 0x06	; 6
     77c:	40 f0       	brcs	.+16     	; 0x78e <DHT11_readByte+0x4c>
			DHT11_data += (1<<DHT11_i);
     77e:	ab 01       	movw	r20, r22
     780:	02 2e       	mov	r0, r18
     782:	02 c0       	rjmp	.+4      	; 0x788 <DHT11_readByte+0x46>
     784:	44 0f       	add	r20, r20
     786:	55 1f       	adc	r21, r21
     788:	0a 94       	dec	r0
     78a:	e2 f7       	brpl	.-8      	; 0x784 <DHT11_readByte+0x42>
     78c:	84 0f       	add	r24, r20

uint8_t DHT11_readByte(void) {
	uint8_t DHT11_counter = 0;
	uint8_t DHT11_data = 0x00;	
	DHT_DDR &=~ (1<<DHT_WIRE);
	for(int DHT11_i = 7; DHT11_i >= 0; DHT11_i--) {
     78e:	21 50       	subi	r18, 0x01	; 1
     790:	31 09       	sbc	r19, r1
     792:	40 f0       	brcs	.+16     	; 0x7a4 <DHT11_readByte+0x62>
		DHT11_counter = 0;
		while(!(DHT_PIN & (1<<DHT_WIRE)) && (DHT11_counter < 10)) {
     794:	85 99       	sbic	0x10, 5	; 16
     796:	02 c0       	rjmp	.+4      	; 0x79c <DHT11_readByte+0x5a>
     798:	9e 2f       	mov	r25, r30
     79a:	dc cf       	rjmp	.-72     	; 0x754 <DHT11_readByte+0x12>
			_delay_us(10);
			DHT11_counter++;
		}
		DHT11_counter = 0;
		while((DHT_PIN & (1<<DHT_WIRE)) && (DHT11_counter < 15)) {
     79c:	85 9b       	sbis	0x10, 5	; 16
     79e:	f7 cf       	rjmp	.-18     	; 0x78e <DHT11_readByte+0x4c>
     7a0:	9f 2f       	mov	r25, r31
     7a2:	e1 cf       	rjmp	.-62     	; 0x766 <DHT11_readByte+0x24>
		if(DHT11_counter > 5) {
			DHT11_data += (1<<DHT11_i);
		}
	}
	return DHT11_data;
}
     7a4:	08 95       	ret

000007a6 <DHT11_getData>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>
#include "DHT11.h"

uint8_t DHT11_getData(int8_t* temperature, uint8_t* humidity) {
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	8b 01       	movw	r16, r22
	//Setting pins
	DHT_DDR &=~ (1<<DHT_WIRE);
     7b6:	8d 98       	cbi	0x11, 5	; 17
	DHT_PORT &=~ (1<<DHT_WIRE);
     7b8:	95 98       	cbi	0x12, 5	; 18
	
	//Checking data line
	if(!(DHT_PIN & (1<<DHT_WIRE))) {
     7ba:	85 99       	sbic	0x10, 5	; 16
     7bc:	08 c0       	rjmp	.+16     	; 0x7ce <DHT11_getData+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7be:	8f e1       	ldi	r24, 0x1F	; 31
     7c0:	9e e4       	ldi	r25, 0x4E	; 78
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <DHT11_getData+0x1c>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <DHT11_getData+0x22>
     7c8:	00 00       	nop
		_delay_ms(10);
		if(!(DHT_PIN & (1<<DHT_WIRE))) return DHT11_ERROR;
     7ca:	85 9b       	sbis	0x10, 5	; 16
     7cc:	1d c0       	rjmp	.+58     	; 0x808 <DHT11_getData+0x62>
	}
	
	//Start signal
	DHT_DDR |= (1<<DHT_WIRE);
     7ce:	8d 9a       	sbi	0x11, 5	; 17
     7d0:	ef e3       	ldi	r30, 0x3F	; 63
     7d2:	fc e9       	ldi	r31, 0x9C	; 156
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <DHT11_getData+0x2e>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <DHT11_getData+0x34>
     7da:	00 00       	nop
	_delay_ms(20);	
	DHT_DDR &=~ (1<<DHT_WIRE);
     7dc:	8d 98       	cbi	0x11, 5	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7de:	f0 ea       	ldi	r31, 0xA0	; 160
     7e0:	fa 95       	dec	r31
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <DHT11_getData+0x3a>
	_delay_us(60);
	if(DHT_PIN & (1<<DHT_WIRE)) {
     7e4:	85 99       	sbic	0x10, 5	; 16
     7e6:	12 c0       	rjmp	.+36     	; 0x80c <DHT11_getData+0x66>
		return DHT11_ERROR;
	}
	while(!(DHT_PIN & (1<<DHT_WIRE)));
     7e8:	85 9b       	sbis	0x10, 5	; 16
     7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <DHT11_getData+0x42>
	while(DHT_PIN & (1<<DHT_WIRE));
     7ec:	85 99       	sbic	0x10, 5	; 16
     7ee:	fe cf       	rjmp	.-4      	; 0x7ec <DHT11_getData+0x46>
	
	//Data bytes
	uint8_t DHT11_RH_integral = DHT11_readByte();
     7f0:	a8 df       	rcall	.-176    	; 0x742 <DHT11_readByte>
     7f2:	e8 2e       	mov	r14, r24
	DHT11_readByte();
     7f4:	a6 df       	rcall	.-180    	; 0x742 <DHT11_readByte>
	uint8_t DHT11_T_integral  = DHT11_readByte();
     7f6:	a5 df       	rcall	.-182    	; 0x742 <DHT11_readByte>
     7f8:	f8 2e       	mov	r15, r24
	DHT11_readByte();
     7fa:	a3 df       	rcall	.-186    	; 0x742 <DHT11_readByte>
	DHT11_readByte();
     7fc:	a2 df       	rcall	.-188    	; 0x742 <DHT11_readByte>
	
	*humidity = DHT11_RH_integral;
     7fe:	f8 01       	movw	r30, r16
     800:	e0 82       	st	Z, r14
	*temperature = DHT11_T_integral;
     802:	f8 82       	st	Y, r15
		
	return DHT11_OK;
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	03 c0       	rjmp	.+6      	; 0x80e <DHT11_getData+0x68>
	DHT_PORT &=~ (1<<DHT_WIRE);
	
	//Checking data line
	if(!(DHT_PIN & (1<<DHT_WIRE))) {
		_delay_ms(10);
		if(!(DHT_PIN & (1<<DHT_WIRE))) return DHT11_ERROR;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	01 c0       	rjmp	.+2      	; 0x80e <DHT11_getData+0x68>
	DHT_DDR |= (1<<DHT_WIRE);
	_delay_ms(20);	
	DHT_DDR &=~ (1<<DHT_WIRE);
	_delay_us(60);
	if(DHT_PIN & (1<<DHT_WIRE)) {
		return DHT11_ERROR;
     80c:	80 e0       	ldi	r24, 0x00	; 0
	
	*humidity = DHT11_RH_integral;
	*temperature = DHT11_T_integral;
		
	return DHT11_OK;
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	08 95       	ret

0000081c <DS18B20_rst>:
#include <stdint.h>
#include "DS18B20.h"

uint8_t DS18B20_rst(void) {
	uint8_t ds18b20_ok = 0x00;
	PORTD &=~ (1<<6);             //Низкий уровень на шине, если выход
     81c:	96 98       	cbi	0x12, 6	; 18
	DQ_out();
     81e:	8e 9a       	sbi	0x11, 6	; 17
     820:	87 ee       	ldi	r24, 0xE7	; 231
     822:	93 e0       	ldi	r25, 0x03	; 3
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <DS18B20_rst+0x8>
     828:	00 c0       	rjmp	.+0      	; 0x82a <DS18B20_rst+0xe>
     82a:	00 00       	nop
	_delay_us(500);
	DQ_in();
     82c:	8e 98       	cbi	0x11, 6	; 17
     82e:	90 ea       	ldi	r25, 0xA0	; 160
     830:	9a 95       	dec	r25
     832:	f1 f7       	brne	.-4      	; 0x830 <DS18B20_rst+0x14>
	_delay_us(60);
	if(!(DQ_pin())) {
     834:	80 b3       	in	r24, 0x10	; 16
     836:	e7 ee       	ldi	r30, 0xE7	; 231
     838:	f3 e0       	ldi	r31, 0x03	; 3
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <DS18B20_rst+0x1e>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <DS18B20_rst+0x24>
     840:	00 00       	nop
     842:	86 fb       	bst	r24, 6
     844:	88 27       	eor	r24, r24
     846:	80 f9       	bld	r24, 0
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	89 27       	eor	r24, r25
		ds18b20_ok = 0xFF;
	}
	_delay_us(500);
	return ds18b20_ok;
}
     84c:	81 95       	neg	r24
     84e:	08 95       	ret

00000850 <DS18B20_write>:

void DS18B20_write(uint8_t ds18b20_data) {
	cli();
     850:	f8 94       	cli
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < 8; i++) {
		if(ds18b20_data & (1<<i)) {
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	ac 01       	movw	r20, r24
     85a:	02 2e       	mov	r0, r18
     85c:	02 c0       	rjmp	.+4      	; 0x862 <DS18B20_write+0x12>
     85e:	55 95       	asr	r21
     860:	47 95       	ror	r20
     862:	0a 94       	dec	r0
     864:	e2 f7       	brpl	.-8      	; 0x85e <DS18B20_write+0xe>
     866:	40 ff       	sbrs	r20, 0
     868:	0b c0       	rjmp	.+22     	; 0x880 <DS18B20_write+0x30>
			DQ_out();
     86a:	8e 9a       	sbi	0x11, 6	; 17
     86c:	4a e1       	ldi	r20, 0x1A	; 26
     86e:	4a 95       	dec	r20
     870:	f1 f7       	brne	.-4      	; 0x86e <DS18B20_write+0x1e>
     872:	00 c0       	rjmp	.+0      	; 0x874 <DS18B20_write+0x24>
			_delay_us(10);
			DQ_in();
     874:	8e 98       	cbi	0x11, 6	; 17
     876:	42 e9       	ldi	r20, 0x92	; 146
     878:	4a 95       	dec	r20
     87a:	f1 f7       	brne	.-4      	; 0x878 <DS18B20_write+0x28>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <DS18B20_write+0x2e>
     87e:	09 c0       	rjmp	.+18     	; 0x892 <DS18B20_write+0x42>
			_delay_us(55);
		}
		else {
			DQ_out();
     880:	8e 9a       	sbi	0x11, 6	; 17
     882:	40 ea       	ldi	r20, 0xA0	; 160
     884:	4a 95       	dec	r20
     886:	f1 f7       	brne	.-4      	; 0x884 <DS18B20_write+0x34>
			_delay_us(60);
			DQ_in();
     888:	8e 98       	cbi	0x11, 6	; 17
     88a:	4d e0       	ldi	r20, 0x0D	; 13
     88c:	4a 95       	dec	r20
     88e:	f1 f7       	brne	.-4      	; 0x88c <DS18B20_write+0x3c>
     890:	00 00       	nop
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	3f 4f       	sbci	r19, 0xFF	; 255
	return ds18b20_ok;
}

void DS18B20_write(uint8_t ds18b20_data) {
	cli();
	for(uint8_t i = 0; i < 8; i++) {
     896:	28 30       	cpi	r18, 0x08	; 8
     898:	31 05       	cpc	r19, r1
     89a:	f1 f6       	brne	.-68     	; 0x858 <DS18B20_write+0x8>
			_delay_us(60);
			DQ_in();
			_delay_us(5);
		}
	}
	sei();
     89c:	78 94       	sei
     89e:	08 95       	ret

000008a0 <DS18B20_read>:
}

uint8_t DS18B20_read(void) {
	cli();
     8a0:	f8 94       	cli
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t ds18b20_rdata = 0;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
		DQ_out();
		_delay_us(5);
		DQ_in();
		_delay_us(15);
		if(DQ_pin()) {
			ds18b20_rdata |= (1<<i);
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	70 e0       	ldi	r23, 0x00	; 0

uint8_t DS18B20_read(void) {
	cli();
	uint8_t ds18b20_rdata = 0;
	for(uint8_t i = 0; i < 8; i++) {
		DQ_out();
     8ac:	8e 9a       	sbi	0x11, 6	; 17
     8ae:	9d e0       	ldi	r25, 0x0D	; 13
     8b0:	9a 95       	dec	r25
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <DS18B20_read+0x10>
     8b4:	00 00       	nop
		_delay_us(5);
		DQ_in();
     8b6:	8e 98       	cbi	0x11, 6	; 17
     8b8:	98 e2       	ldi	r25, 0x28	; 40
     8ba:	9a 95       	dec	r25
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <DS18B20_read+0x1a>
		_delay_us(15);
		if(DQ_pin()) {
     8be:	86 9b       	sbis	0x10, 6	; 16
     8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <DS18B20_read+0x32>
			ds18b20_rdata |= (1<<i);
     8c2:	ab 01       	movw	r20, r22
     8c4:	02 2e       	mov	r0, r18
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <DS18B20_read+0x2c>
     8c8:	44 0f       	add	r20, r20
     8ca:	55 1f       	adc	r21, r21
     8cc:	0a 94       	dec	r0
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <DS18B20_read+0x28>
     8d0:	84 2b       	or	r24, r20
     8d2:	95 e8       	ldi	r25, 0x85	; 133
     8d4:	9a 95       	dec	r25
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <DS18B20_read+0x34>
     8d8:	00 00       	nop
     8da:	2f 5f       	subi	r18, 0xFF	; 255
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t DS18B20_read(void) {
	cli();
	uint8_t ds18b20_rdata = 0;
	for(uint8_t i = 0; i < 8; i++) {
     8de:	28 30       	cpi	r18, 0x08	; 8
     8e0:	31 05       	cpc	r19, r1
     8e2:	21 f7       	brne	.-56     	; 0x8ac <DS18B20_read+0xc>
		if(DQ_pin()) {
			ds18b20_rdata |= (1<<i);
		}
		_delay_us(50);
	}
	sei();
     8e4:	78 94       	sei
	return ds18b20_rdata;
}
     8e6:	08 95       	ret

000008e8 <DS18B20_start_meas>:

void DS18B20_start_meas(void) {
	if (DS18B20_rst() > 0) {
     8e8:	99 df       	rcall	.-206    	; 0x81c <DS18B20_rst>
     8ea:	88 23       	and	r24, r24
     8ec:	21 f0       	breq	.+8      	; 0x8f6 <DS18B20_start_meas+0xe>
		DS18B20_write(SKIP_ROM);
     8ee:	8c ec       	ldi	r24, 0xCC	; 204
     8f0:	af df       	rcall	.-162    	; 0x850 <DS18B20_write>
		DS18B20_write(CONVERT);
     8f2:	84 e4       	ldi	r24, 0x44	; 68
     8f4:	ad df       	rcall	.-166    	; 0x850 <DS18B20_write>
     8f6:	08 95       	ret

000008f8 <DS18B20_temperature>:
		//_delay_ms(200);
	}
}

int16_t DS18B20_temperature(void) {
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
	int32_t ds18b20temperature = 0;
	if (DS18B20_rst() > 0) {
     900:	8d df       	rcall	.-230    	; 0x81c <DS18B20_rst>
     902:	88 23       	and	r24, r24
     904:	81 f1       	breq	.+96     	; 0x966 <DS18B20_temperature+0x6e>
		DS18B20_write(SKIP_ROM);
     906:	8c ec       	ldi	r24, 0xCC	; 204
     908:	a3 df       	rcall	.-186    	; 0x850 <DS18B20_write>
		DS18B20_write(READ_SCRATCHPAD);
     90a:	8e eb       	ldi	r24, 0xBE	; 190
     90c:	a1 df       	rcall	.-190    	; 0x850 <DS18B20_write>
		ds18b20temperature = DS18B20_read();
     90e:	c8 df       	rcall	.-112    	; 0x8a0 <DS18B20_read>
     910:	c8 2e       	mov	r12, r24
     912:	d1 2c       	mov	r13, r1
     914:	e1 2c       	mov	r14, r1
     916:	f1 2c       	mov	r15, r1
		ds18b20temperature += DS18B20_read() << 8;
     918:	c3 df       	rcall	.-122    	; 0x8a0 <DS18B20_read>
     91a:	28 2f       	mov	r18, r24
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	32 2f       	mov	r19, r18
     920:	22 27       	eor	r18, r18
     922:	c9 01       	movw	r24, r18
     924:	aa 27       	eor	r26, r26
     926:	97 fd       	sbrc	r25, 7
     928:	a0 95       	com	r26
     92a:	ba 2f       	mov	r27, r26
     92c:	9c 01       	movw	r18, r24
     92e:	ad 01       	movw	r20, r26
     930:	2c 0d       	add	r18, r12
     932:	3d 1d       	adc	r19, r13
     934:	4e 1d       	adc	r20, r14
     936:	5f 1d       	adc	r21, r15
		ds18b20temperature *= 100;
     938:	a4 e6       	ldi	r26, 0x64	; 100
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	5d d8       	rcall	.-3910   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
		ds18b20temperature /= 16;
     93e:	6b 01       	movw	r12, r22
     940:	7c 01       	movw	r14, r24
     942:	99 23       	and	r25, r25
     944:	2c f4       	brge	.+10     	; 0x950 <DS18B20_temperature+0x58>
     946:	2f e0       	ldi	r18, 0x0F	; 15
     948:	c2 0e       	add	r12, r18
     94a:	d1 1c       	adc	r13, r1
     94c:	e1 1c       	adc	r14, r1
     94e:	f1 1c       	adc	r15, r1
     950:	d7 01       	movw	r26, r14
     952:	c6 01       	movw	r24, r12
     954:	68 94       	set
     956:	13 f8       	bld	r1, 3
     958:	b5 95       	asr	r27
     95a:	a7 95       	ror	r26
     95c:	97 95       	ror	r25
     95e:	87 95       	ror	r24
     960:	16 94       	lsr	r1
     962:	d1 f7       	brne	.-12     	; 0x958 <DS18B20_temperature+0x60>
     964:	03 c0       	rjmp	.+6      	; 0x96c <DS18B20_temperature+0x74>
		//_delay_ms(200);
	}
}

int16_t DS18B20_temperature(void) {
	int32_t ds18b20temperature = 0;
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	dc 01       	movw	r26, r24
		ds18b20temperature += DS18B20_read() << 8;
		ds18b20temperature *= 100;
		ds18b20temperature /= 16;
	}
	return ds18b20temperature;
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	08 95       	ret

00000976 <I2C_read>:
	_delay_us(I2C_DELAY);
	SDA_in();
	return;
}

void I2C_read(uint8_t addr, uint8_t reg, uint8_t * data, uint8_t count) {
     976:	36 2f       	mov	r19, r22

/***************************************
 * Функция	 : отправка сигнала "СТАРТ"
 ***************************************/
static void inline I2C_start(void) {
	PORTC &=~ (1<<4);              //Низкий уровень на SDA, если выход
     978:	ac 98       	cbi	0x15, 4	; 21
	PORTC &=~ (1<<5);              //Низкий уровень на SCL, если выход
     97a:	ad 98       	cbi	0x15, 5	; 21
	SDA_in();
     97c:	a4 98       	cbi	0x14, 4	; 20
     97e:	6a e0       	ldi	r22, 0x0A	; 10
     980:	6a 95       	dec	r22
     982:	f1 f7       	brne	.-4      	; 0x980 <I2C_read+0xa>
     984:	00 c0       	rjmp	.+0      	; 0x986 <I2C_read+0x10>
	_delay_us(I2C_DELAY);
	SCL_in();
     986:	a5 98       	cbi	0x14, 5	; 20
     988:	7a e0       	ldi	r23, 0x0A	; 10
     98a:	7a 95       	dec	r23
     98c:	f1 f7       	brne	.-4      	; 0x98a <I2C_read+0x14>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <I2C_read+0x1a>
	_delay_us(I2C_DELAY);
	SDA_out();
     990:	a4 9a       	sbi	0x14, 4	; 20
     992:	9a e0       	ldi	r25, 0x0A	; 10
     994:	9a 95       	dec	r25
     996:	f1 f7       	brne	.-4      	; 0x994 <I2C_read+0x1e>
     998:	00 c0       	rjmp	.+0      	; 0x99a <I2C_read+0x24>
	_delay_us(I2C_DELAY);
	SCL_out();
     99a:	a5 9a       	sbi	0x14, 5	; 20
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     99c:	98 e0       	ldi	r25, 0x08	; 8
     99e:	90 93 b5 01 	sts	0x01B5, r25
     9a2:	e8 e0       	ldi	r30, 0x08	; 8
		if(msg & (1<<(I2C_counter1 - 1))) {			
     9a4:	a8 2f       	mov	r26, r24
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e1 50       	subi	r30, 0x01	; 1
     9aa:	bd 01       	movw	r22, r26
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <I2C_read+0x3c>
     9ae:	75 95       	asr	r23
     9b0:	67 95       	ror	r22
     9b2:	ea 95       	dec	r30
     9b4:	e2 f7       	brpl	.-8      	; 0x9ae <I2C_read+0x38>
     9b6:	60 ff       	sbrs	r22, 0
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <I2C_read+0x48>
			SDA_in();
     9ba:	a4 98       	cbi	0x14, 4	; 20
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <I2C_read+0x4a>
		}
		else {			
			SDA_out();
     9be:	a4 9a       	sbi	0x14, 4	; 20
     9c0:	7a e0       	ldi	r23, 0x0A	; 10
     9c2:	7a 95       	dec	r23
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <I2C_read+0x4c>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <I2C_read+0x52>
		}
		_delay_us(I2C_DELAY);
		SCL_in();
     9c8:	a5 98       	cbi	0x14, 5	; 20
     9ca:	9a e0       	ldi	r25, 0x0A	; 10
     9cc:	9a 95       	dec	r25
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <I2C_read+0x56>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <I2C_read+0x5c>
     9d2:	ea e0       	ldi	r30, 0x0A	; 10
     9d4:	ea 95       	dec	r30
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <I2C_read+0x5e>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <I2C_read+0x64>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
     9da:	a5 9a       	sbi	0x14, 5	; 20
     9dc:	fa e0       	ldi	r31, 0x0A	; 10
     9de:	fa 95       	dec	r31
     9e0:	f1 f7       	brne	.-4      	; 0x9de <I2C_read+0x68>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <I2C_read+0x6e>
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     9e4:	e0 91 b5 01 	lds	r30, 0x01B5
     9e8:	e1 50       	subi	r30, 0x01	; 1
     9ea:	e0 93 b5 01 	sts	0x01B5, r30
     9ee:	e1 11       	cpse	r30, r1
     9f0:	db cf       	rjmp	.-74     	; 0x9a8 <I2C_read+0x32>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
		_delay_us(I2C_DELAY);
	}	
	SCL_in();
     9f2:	a5 98       	cbi	0x14, 5	; 20
	SDA_in();
     9f4:	a4 98       	cbi	0x14, 4	; 20
     9f6:	6a e0       	ldi	r22, 0x0A	; 10
     9f8:	6a 95       	dec	r22
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <I2C_read+0x82>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <I2C_read+0x88>
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
     9fe:	10 92 b5 01 	sts	0x01B5, r1
	while(SDA_pin()) {
     a02:	9c 99       	sbic	0x13, 4	; 19
     a04:	03 c0       	rjmp	.+6      	; 0xa0c <I2C_read+0x96>
     a06:	0d c0       	rjmp	.+26     	; 0xa22 <I2C_read+0xac>
		if(I2C_counter1 < 200) {
     a08:	98 3c       	cpi	r25, 0xC8	; 200
     a0a:	c8 f4       	brcc	.+50     	; 0xa3e <I2C_read+0xc8>
     a0c:	72 e0       	ldi	r23, 0x02	; 2
     a0e:	7a 95       	dec	r23
     a10:	f1 f7       	brne	.-4      	; 0xa0e <I2C_read+0x98>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <I2C_read+0x9e>
			_delay_us(1);
			I2C_counter1++;
     a14:	90 91 b5 01 	lds	r25, 0x01B5
     a18:	9f 5f       	subi	r25, 0xFF	; 255
     a1a:	90 93 b5 01 	sts	0x01B5, r25
	}	
	SCL_in();
	SDA_in();
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
	while(SDA_pin()) {
     a1e:	9c 99       	sbic	0x13, 4	; 19
     a20:	f3 cf       	rjmp	.-26     	; 0xa08 <I2C_read+0x92>
     a22:	9a e0       	ldi	r25, 0x0A	; 10
     a24:	9a 95       	dec	r25
     a26:	f1 f7       	brne	.-4      	; 0xa24 <I2C_read+0xae>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <I2C_read+0xb4>
		else {
			return;
		}
	};
	_delay_us(I2C_DELAY);
	SCL_out();
     a2a:	a5 9a       	sbi	0x14, 5	; 20
     a2c:	aa e0       	ldi	r26, 0x0A	; 10
     a2e:	aa 95       	dec	r26
     a30:	f1 f7       	brne	.-4      	; 0xa2e <I2C_read+0xb8>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <I2C_read+0xbe>
	_delay_us(I2C_DELAY);
	SDA_out();
     a34:	a4 9a       	sbi	0x14, 4	; 20
     a36:	ba e0       	ldi	r27, 0x0A	; 10
     a38:	ba 95       	dec	r27
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <I2C_read+0xc2>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <I2C_read+0xc8>
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     a3e:	98 e0       	ldi	r25, 0x08	; 8
     a40:	90 93 b5 01 	sts	0x01B5, r25
     a44:	68 e0       	ldi	r22, 0x08	; 8
		if(msg & (1<<(I2C_counter1 - 1))) {			
     a46:	e3 2f       	mov	r30, r19
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	61 50       	subi	r22, 0x01	; 1
     a4c:	df 01       	movw	r26, r30
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <I2C_read+0xde>
     a50:	b5 95       	asr	r27
     a52:	a7 95       	ror	r26
     a54:	6a 95       	dec	r22
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <I2C_read+0xda>
     a58:	a0 ff       	sbrs	r26, 0
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <I2C_read+0xea>
			SDA_in();
     a5c:	a4 98       	cbi	0x14, 4	; 20
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <I2C_read+0xec>
		}
		else {			
			SDA_out();
     a60:	a4 9a       	sbi	0x14, 4	; 20
     a62:	ba e0       	ldi	r27, 0x0A	; 10
     a64:	ba 95       	dec	r27
     a66:	f1 f7       	brne	.-4      	; 0xa64 <I2C_read+0xee>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <I2C_read+0xf4>
		}
		_delay_us(I2C_DELAY);
		SCL_in();
     a6a:	a5 98       	cbi	0x14, 5	; 20
     a6c:	6a e0       	ldi	r22, 0x0A	; 10
     a6e:	6a 95       	dec	r22
     a70:	f1 f7       	brne	.-4      	; 0xa6e <I2C_read+0xf8>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <I2C_read+0xfe>
     a74:	7a e0       	ldi	r23, 0x0A	; 10
     a76:	7a 95       	dec	r23
     a78:	f1 f7       	brne	.-4      	; 0xa76 <I2C_read+0x100>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <I2C_read+0x106>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
     a7c:	a5 9a       	sbi	0x14, 5	; 20
     a7e:	9a e0       	ldi	r25, 0x0A	; 10
     a80:	9a 95       	dec	r25
     a82:	f1 f7       	brne	.-4      	; 0xa80 <I2C_read+0x10a>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <I2C_read+0x110>
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     a86:	60 91 b5 01 	lds	r22, 0x01B5
     a8a:	61 50       	subi	r22, 0x01	; 1
     a8c:	60 93 b5 01 	sts	0x01B5, r22
     a90:	61 11       	cpse	r22, r1
     a92:	db cf       	rjmp	.-74     	; 0xa4a <I2C_read+0xd4>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
		_delay_us(I2C_DELAY);
	}	
	SCL_in();
     a94:	a5 98       	cbi	0x14, 5	; 20
	SDA_in();
     a96:	a4 98       	cbi	0x14, 4	; 20
     a98:	aa e0       	ldi	r26, 0x0A	; 10
     a9a:	aa 95       	dec	r26
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <I2C_read+0x124>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <I2C_read+0x12a>
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
     aa0:	10 92 b5 01 	sts	0x01B5, r1
	while(SDA_pin()) {
     aa4:	9c 99       	sbic	0x13, 4	; 19
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <I2C_read+0x138>
     aa8:	0d c0       	rjmp	.+26     	; 0xac4 <I2C_read+0x14e>
		if(I2C_counter1 < 200) {
     aaa:	98 3c       	cpi	r25, 0xC8	; 200
     aac:	c8 f4       	brcc	.+50     	; 0xae0 <I2C_read+0x16a>
     aae:	b2 e0       	ldi	r27, 0x02	; 2
     ab0:	ba 95       	dec	r27
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <I2C_read+0x13a>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <I2C_read+0x140>
			_delay_us(1);
			I2C_counter1++;
     ab6:	90 91 b5 01 	lds	r25, 0x01B5
     aba:	9f 5f       	subi	r25, 0xFF	; 255
     abc:	90 93 b5 01 	sts	0x01B5, r25
	}	
	SCL_in();
	SDA_in();
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
	while(SDA_pin()) {
     ac0:	9c 99       	sbic	0x13, 4	; 19
     ac2:	f3 cf       	rjmp	.-26     	; 0xaaa <I2C_read+0x134>
     ac4:	ea e0       	ldi	r30, 0x0A	; 10
     ac6:	ea 95       	dec	r30
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <I2C_read+0x150>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <I2C_read+0x156>
		else {
			return;
		}
	};
	_delay_us(I2C_DELAY);
	SCL_out();
     acc:	a5 9a       	sbi	0x14, 5	; 20
     ace:	fa e0       	ldi	r31, 0x0A	; 10
     ad0:	fa 95       	dec	r31
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <I2C_read+0x15a>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <I2C_read+0x160>
	_delay_us(I2C_DELAY);
	SDA_out();
     ad6:	a4 9a       	sbi	0x14, 4	; 20
     ad8:	6a e0       	ldi	r22, 0x0A	; 10
     ada:	6a 95       	dec	r22
     adc:	f1 f7       	brne	.-4      	; 0xada <I2C_read+0x164>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <I2C_read+0x16a>

/***************************************
 * Функция	 : отправка сигнала "СТАРТ"
 ***************************************/
static void inline I2C_start(void) {
	PORTC &=~ (1<<4);              //Низкий уровень на SDA, если выход
     ae0:	ac 98       	cbi	0x15, 4	; 21
	PORTC &=~ (1<<5);              //Низкий уровень на SCL, если выход
     ae2:	ad 98       	cbi	0x15, 5	; 21
	SDA_in();
     ae4:	a4 98       	cbi	0x14, 4	; 20
     ae6:	7a e0       	ldi	r23, 0x0A	; 10
     ae8:	7a 95       	dec	r23
     aea:	f1 f7       	brne	.-4      	; 0xae8 <I2C_read+0x172>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <I2C_read+0x178>
	_delay_us(I2C_DELAY);
	SCL_in();
     aee:	a5 98       	cbi	0x14, 5	; 20
     af0:	9a e0       	ldi	r25, 0x0A	; 10
     af2:	9a 95       	dec	r25
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <I2C_read+0x17c>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <I2C_read+0x182>
	_delay_us(I2C_DELAY);
	SDA_out();
     af8:	a4 9a       	sbi	0x14, 4	; 20
     afa:	aa e0       	ldi	r26, 0x0A	; 10
     afc:	aa 95       	dec	r26
     afe:	f1 f7       	brne	.-4      	; 0xafc <I2C_read+0x186>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <I2C_read+0x18c>
	_delay_us(I2C_DELAY);
	SCL_out();
     b02:	a5 9a       	sbi	0x14, 5	; 20
void I2C_read(uint8_t addr, uint8_t reg, uint8_t * data, uint8_t count) {
	I2C_start();
	I2C_transmit(addr);
	I2C_transmit(reg);
	I2C_start();
	I2C_transmit(addr + 1);
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	68 0f       	add	r22, r24
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	80 93 b5 01 	sts	0x01B5, r24
		if(msg & (1<<(I2C_counter1 - 1))) {			
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	81 50       	subi	r24, 0x01	; 1
     b12:	fb 01       	movw	r30, r22
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <I2C_read+0x1a4>
     b16:	f5 95       	asr	r31
     b18:	e7 95       	ror	r30
     b1a:	8a 95       	dec	r24
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <I2C_read+0x1a0>
     b1e:	e0 ff       	sbrs	r30, 0
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <I2C_read+0x1b0>
			SDA_in();
     b22:	a4 98       	cbi	0x14, 4	; 20
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <I2C_read+0x1b2>
		}
		else {			
			SDA_out();
     b26:	a4 9a       	sbi	0x14, 4	; 20
     b28:	fa e0       	ldi	r31, 0x0A	; 10
     b2a:	fa 95       	dec	r31
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <I2C_read+0x1b4>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <I2C_read+0x1ba>
		}
		_delay_us(I2C_DELAY);
		SCL_in();
     b30:	a5 98       	cbi	0x14, 5	; 20
     b32:	8a e0       	ldi	r24, 0x0A	; 10
     b34:	8a 95       	dec	r24
     b36:	f1 f7       	brne	.-4      	; 0xb34 <I2C_read+0x1be>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <I2C_read+0x1c4>
     b3a:	9a e0       	ldi	r25, 0x0A	; 10
     b3c:	9a 95       	dec	r25
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <I2C_read+0x1c6>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <I2C_read+0x1cc>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
     b42:	a5 9a       	sbi	0x14, 5	; 20
     b44:	aa e0       	ldi	r26, 0x0A	; 10
     b46:	aa 95       	dec	r26
     b48:	f1 f7       	brne	.-4      	; 0xb46 <I2C_read+0x1d0>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <I2C_read+0x1d6>
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     b4c:	80 91 b5 01 	lds	r24, 0x01B5
     b50:	81 50       	subi	r24, 0x01	; 1
     b52:	80 93 b5 01 	sts	0x01B5, r24
     b56:	81 11       	cpse	r24, r1
     b58:	db cf       	rjmp	.-74     	; 0xb10 <I2C_read+0x19a>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
		_delay_us(I2C_DELAY);
	}	
	SCL_in();
     b5a:	a5 98       	cbi	0x14, 5	; 20
	SDA_in();
     b5c:	a4 98       	cbi	0x14, 4	; 20
     b5e:	ba e0       	ldi	r27, 0x0A	; 10
     b60:	ba 95       	dec	r27
     b62:	f1 f7       	brne	.-4      	; 0xb60 <I2C_read+0x1ea>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <I2C_read+0x1f0>
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
     b66:	10 92 b5 01 	sts	0x01B5, r1
	while(SDA_pin()) {
     b6a:	9c 99       	sbic	0x13, 4	; 19
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <I2C_read+0x1fe>
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <I2C_read+0x214>
		if(I2C_counter1 < 200) {
     b70:	88 3c       	cpi	r24, 0xC8	; 200
     b72:	c8 f4       	brcc	.+50     	; 0xba6 <I2C_read+0x230>
     b74:	e2 e0       	ldi	r30, 0x02	; 2
     b76:	ea 95       	dec	r30
     b78:	f1 f7       	brne	.-4      	; 0xb76 <I2C_read+0x200>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <I2C_read+0x206>
			_delay_us(1);
			I2C_counter1++;
     b7c:	80 91 b5 01 	lds	r24, 0x01B5
     b80:	8f 5f       	subi	r24, 0xFF	; 255
     b82:	80 93 b5 01 	sts	0x01B5, r24
	}	
	SCL_in();
	SDA_in();
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
	while(SDA_pin()) {
     b86:	9c 99       	sbic	0x13, 4	; 19
     b88:	f3 cf       	rjmp	.-26     	; 0xb70 <I2C_read+0x1fa>
     b8a:	fa e0       	ldi	r31, 0x0A	; 10
     b8c:	fa 95       	dec	r31
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <I2C_read+0x216>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <I2C_read+0x21c>
		else {
			return;
		}
	};
	_delay_us(I2C_DELAY);
	SCL_out();
     b92:	a5 9a       	sbi	0x14, 5	; 20
     b94:	6a e0       	ldi	r22, 0x0A	; 10
     b96:	6a 95       	dec	r22
     b98:	f1 f7       	brne	.-4      	; 0xb96 <I2C_read+0x220>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <I2C_read+0x226>
	_delay_us(I2C_DELAY);
	SDA_out();
     b9c:	a4 9a       	sbi	0x14, 4	; 20
     b9e:	7a e0       	ldi	r23, 0x0A	; 10
     ba0:	7a 95       	dec	r23
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <I2C_read+0x22a>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <I2C_read+0x230>
	I2C_start();
	I2C_transmit(addr);
	I2C_transmit(reg);
	I2C_start();
	I2C_transmit(addr + 1);
	for(I2C_counter2 = 0; I2C_counter2 < (count - 1); I2C_counter2++) {
     ba6:	10 92 b4 01 	sts	0x01B4, r1
     baa:	62 2f       	mov	r22, r18
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	61 50       	subi	r22, 0x01	; 1
     bb0:	71 09       	sbc	r23, r1
     bb2:	16 16       	cp	r1, r22
     bb4:	17 06       	cpc	r1, r23
     bb6:	0c f0       	brlt	.+2      	; 0xbba <I2C_read+0x244>
     bb8:	9a c0       	rjmp	.+308    	; 0xcee <I2C_read+0x378>
     bba:	30 e0       	ldi	r19, 0x00	; 0
		((uint8_t*) data)[I2C_counter2] = I2C_receive();
     bbc:	fa 01       	movw	r30, r20
     bbe:	e3 0f       	add	r30, r19
     bc0:	f1 1d       	adc	r31, r1
 * Функция	 : прием байта
 * Ответ	 : полученный байт
 ***************************************/
static uint8_t inline I2C_receive(void) {
	uint8_t msg = 0;
	SDA_in();
     bc2:	a4 98       	cbi	0x14, 4	; 20
	for(I2C_counter1 = 0; I2C_counter1 < 7; I2C_counter1++) {
     bc4:	10 92 b5 01 	sts	0x01B5, r1
/***************************************
 * Функция	 : прием байта
 * Ответ	 : полученный байт
 ***************************************/
static uint8_t inline I2C_receive(void) {
	uint8_t msg = 0;
     bc8:	90 e0       	ldi	r25, 0x00	; 0
	SDA_in();
	for(I2C_counter1 = 0; I2C_counter1 < 7; I2C_counter1++) {
		SCL_in();
     bca:	a5 98       	cbi	0x14, 5	; 20
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	8a 95       	dec	r24
     bd0:	f1 f7       	brne	.-4      	; 0xbce <I2C_read+0x258>
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <I2C_read+0x25e>
		_delay_us(I2C_DELAY);
		if(SDA_pin()) {
     bd4:	9c 99       	sbic	0x13, 4	; 19
			msg = msg + 1;
     bd6:	9f 5f       	subi	r25, 0xFF	; 255
     bd8:	aa e0       	ldi	r26, 0x0A	; 10
     bda:	aa 95       	dec	r26
     bdc:	f1 f7       	brne	.-4      	; 0xbda <I2C_read+0x264>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <I2C_read+0x26a>
		}
		_delay_us(I2C_DELAY);
		SCL_out();
     be0:	a5 9a       	sbi	0x14, 5	; 20
     be2:	ba e0       	ldi	r27, 0x0A	; 10
     be4:	ba 95       	dec	r27
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <I2C_read+0x26e>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <I2C_read+0x274>
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	8a 95       	dec	r24
     bee:	f1 f7       	brne	.-4      	; 0xbec <I2C_read+0x276>
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <I2C_read+0x27c>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		msg = msg << 1;
     bf2:	99 0f       	add	r25, r25
 * Ответ	 : полученный байт
 ***************************************/
static uint8_t inline I2C_receive(void) {
	uint8_t msg = 0;
	SDA_in();
	for(I2C_counter1 = 0; I2C_counter1 < 7; I2C_counter1++) {
     bf4:	30 91 b5 01 	lds	r19, 0x01B5
     bf8:	3f 5f       	subi	r19, 0xFF	; 255
     bfa:	30 93 b5 01 	sts	0x01B5, r19
     bfe:	37 30       	cpi	r19, 0x07	; 7
     c00:	20 f3       	brcs	.-56     	; 0xbca <I2C_read+0x254>
		SCL_out();
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		msg = msg << 1;
	}
	SCL_in();
     c02:	a5 98       	cbi	0x14, 5	; 20
     c04:	aa e0       	ldi	r26, 0x0A	; 10
     c06:	aa 95       	dec	r26
     c08:	f1 f7       	brne	.-4      	; 0xc06 <I2C_read+0x290>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <I2C_read+0x296>
	_delay_us(I2C_DELAY);
	if(SDA_pin()) {
     c0c:	9c 99       	sbic	0x13, 4	; 19
		msg = msg + 1;
     c0e:	9f 5f       	subi	r25, 0xFF	; 255
     c10:	ba e0       	ldi	r27, 0x0A	; 10
     c12:	ba 95       	dec	r27
     c14:	f1 f7       	brne	.-4      	; 0xc12 <I2C_read+0x29c>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <I2C_read+0x2a2>
	}
	_delay_us(I2C_DELAY);
	SCL_out();
     c18:	a5 9a       	sbi	0x14, 5	; 20
     c1a:	8a e0       	ldi	r24, 0x0A	; 10
     c1c:	8a 95       	dec	r24
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <I2C_read+0x2a6>
     c20:	00 c0       	rjmp	.+0      	; 0xc22 <I2C_read+0x2ac>
     c22:	aa e0       	ldi	r26, 0x0A	; 10
     c24:	aa 95       	dec	r26
     c26:	f1 f7       	brne	.-4      	; 0xc24 <I2C_read+0x2ae>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <I2C_read+0x2b4>
	I2C_transmit(addr);
	I2C_transmit(reg);
	I2C_start();
	I2C_transmit(addr + 1);
	for(I2C_counter2 = 0; I2C_counter2 < (count - 1); I2C_counter2++) {
		((uint8_t*) data)[I2C_counter2] = I2C_receive();
     c2a:	90 83       	st	Z, r25

/***************************************
 * Функция	 : отправка сигнала "ACK"
 ***************************************/
static void inline I2C_send_ack(void) {
	SDA_out();
     c2c:	a4 9a       	sbi	0x14, 4	; 20
	SCL_in();
     c2e:	a5 98       	cbi	0x14, 5	; 20
     c30:	ba e0       	ldi	r27, 0x0A	; 10
     c32:	ba 95       	dec	r27
     c34:	f1 f7       	brne	.-4      	; 0xc32 <I2C_read+0x2bc>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <I2C_read+0x2c2>
	_delay_us(I2C_DELAY);
	SCL_out();
     c38:	a5 9a       	sbi	0x14, 5	; 20
	SDA_in();
     c3a:	a4 98       	cbi	0x14, 4	; 20
	I2C_start();
	I2C_transmit(addr);
	I2C_transmit(reg);
	I2C_start();
	I2C_transmit(addr + 1);
	for(I2C_counter2 = 0; I2C_counter2 < (count - 1); I2C_counter2++) {
     c3c:	30 91 b4 01 	lds	r19, 0x01B4
     c40:	3f 5f       	subi	r19, 0xFF	; 255
     c42:	30 93 b4 01 	sts	0x01B4, r19
     c46:	83 2f       	mov	r24, r19
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	86 17       	cp	r24, r22
     c4c:	97 07       	cpc	r25, r23
     c4e:	0c f4       	brge	.+2      	; 0xc52 <I2C_read+0x2dc>
     c50:	b5 cf       	rjmp	.-150    	; 0xbbc <I2C_read+0x246>
		((uint8_t*) data)[I2C_counter2] = I2C_receive();
		I2C_send_ack();
	}
	((uint8_t*) data)[count-1] = I2C_receive();
     c52:	82 2f       	mov	r24, r18
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	fa 01       	movw	r30, r20
     c5a:	e8 0f       	add	r30, r24
     c5c:	f9 1f       	adc	r31, r25
 * Функция	 : прием байта
 * Ответ	 : полученный байт
 ***************************************/
static uint8_t inline I2C_receive(void) {
	uint8_t msg = 0;
	SDA_in();
     c5e:	a4 98       	cbi	0x14, 4	; 20
	for(I2C_counter1 = 0; I2C_counter1 < 7; I2C_counter1++) {
     c60:	10 92 b5 01 	sts	0x01B5, r1
     c64:	4d c0       	rjmp	.+154    	; 0xd00 <I2C_read+0x38a>
		SCL_in();
     c66:	a5 98       	cbi	0x14, 5	; 20
     c68:	6a e0       	ldi	r22, 0x0A	; 10
     c6a:	6a 95       	dec	r22
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <I2C_read+0x2f4>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <I2C_read+0x2fa>
		_delay_us(I2C_DELAY);
		if(SDA_pin()) {
     c70:	9c 99       	sbic	0x13, 4	; 19
			msg = msg + 1;
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	7a e0       	ldi	r23, 0x0A	; 10
     c76:	7a 95       	dec	r23
     c78:	f1 f7       	brne	.-4      	; 0xc76 <I2C_read+0x300>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <I2C_read+0x306>
		}
		_delay_us(I2C_DELAY);
		SCL_out();
     c7c:	a5 9a       	sbi	0x14, 5	; 20
     c7e:	9a e0       	ldi	r25, 0x0A	; 10
     c80:	9a 95       	dec	r25
     c82:	f1 f7       	brne	.-4      	; 0xc80 <I2C_read+0x30a>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <I2C_read+0x310>
     c86:	aa e0       	ldi	r26, 0x0A	; 10
     c88:	aa 95       	dec	r26
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <I2C_read+0x312>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <I2C_read+0x318>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		msg = msg << 1;
     c8e:	88 0f       	add	r24, r24
 * Ответ	 : полученный байт
 ***************************************/
static uint8_t inline I2C_receive(void) {
	uint8_t msg = 0;
	SDA_in();
	for(I2C_counter1 = 0; I2C_counter1 < 7; I2C_counter1++) {
     c90:	90 91 b5 01 	lds	r25, 0x01B5
     c94:	9f 5f       	subi	r25, 0xFF	; 255
     c96:	90 93 b5 01 	sts	0x01B5, r25
     c9a:	97 30       	cpi	r25, 0x07	; 7
     c9c:	20 f3       	brcs	.-56     	; 0xc66 <I2C_read+0x2f0>
		SCL_out();
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		msg = msg << 1;
	}
	SCL_in();
     c9e:	a5 98       	cbi	0x14, 5	; 20
     ca0:	ba e0       	ldi	r27, 0x0A	; 10
     ca2:	ba 95       	dec	r27
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <I2C_read+0x32c>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <I2C_read+0x332>
	_delay_us(I2C_DELAY);
	if(SDA_pin()) {
     ca8:	9c 99       	sbic	0x13, 4	; 19
		msg = msg + 1;
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	6a e0       	ldi	r22, 0x0A	; 10
     cae:	6a 95       	dec	r22
     cb0:	f1 f7       	brne	.-4      	; 0xcae <I2C_read+0x338>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <I2C_read+0x33e>
	}
	_delay_us(I2C_DELAY);
	SCL_out();
     cb4:	a5 9a       	sbi	0x14, 5	; 20
     cb6:	7a e0       	ldi	r23, 0x0A	; 10
     cb8:	7a 95       	dec	r23
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <I2C_read+0x342>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <I2C_read+0x348>
     cbe:	9a e0       	ldi	r25, 0x0A	; 10
     cc0:	9a 95       	dec	r25
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <I2C_read+0x34a>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <I2C_read+0x350>
	I2C_transmit(addr + 1);
	for(I2C_counter2 = 0; I2C_counter2 < (count - 1); I2C_counter2++) {
		((uint8_t*) data)[I2C_counter2] = I2C_receive();
		I2C_send_ack();
	}
	((uint8_t*) data)[count-1] = I2C_receive();
     cc6:	80 83       	st	Z, r24

/***************************************
 * Функция	 : отправка сигнала "NACK"
 ***************************************/
static void inline I2C_send_nack(void) {
	SDA_in();
     cc8:	a4 98       	cbi	0x14, 4	; 20
	SCL_in();
     cca:	a5 98       	cbi	0x14, 5	; 20
     ccc:	aa e0       	ldi	r26, 0x0A	; 10
     cce:	aa 95       	dec	r26
     cd0:	f1 f7       	brne	.-4      	; 0xcce <I2C_read+0x358>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <I2C_read+0x35e>
	_delay_us(I2C_DELAY);
	SCL_out();
     cd4:	a5 9a       	sbi	0x14, 5	; 20

/***************************************
 * Функция	 : отправка сигнала "СТОП"
 ***************************************/
static void inline I2C_stop(void) {
	SDA_out();
     cd6:	a4 9a       	sbi	0x14, 4	; 20
     cd8:	ba e0       	ldi	r27, 0x0A	; 10
     cda:	ba 95       	dec	r27
     cdc:	f1 f7       	brne	.-4      	; 0xcda <I2C_read+0x364>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <I2C_read+0x36a>
	_delay_us(I2C_DELAY);
	SCL_in();
     ce0:	a5 98       	cbi	0x14, 5	; 20
     ce2:	ea e0       	ldi	r30, 0x0A	; 10
     ce4:	ea 95       	dec	r30
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <I2C_read+0x36e>
     ce8:	00 c0       	rjmp	.+0      	; 0xcea <I2C_read+0x374>
	_delay_us(I2C_DELAY);
	SDA_in();
     cea:	a4 98       	cbi	0x14, 4	; 20
     cec:	08 95       	ret
	I2C_transmit(addr + 1);
	for(I2C_counter2 = 0; I2C_counter2 < (count - 1); I2C_counter2++) {
		((uint8_t*) data)[I2C_counter2] = I2C_receive();
		I2C_send_ack();
	}
	((uint8_t*) data)[count-1] = I2C_receive();
     cee:	82 2f       	mov	r24, r18
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	fa 01       	movw	r30, r20
     cf6:	e8 0f       	add	r30, r24
     cf8:	f9 1f       	adc	r31, r25
 * Функция	 : прием байта
 * Ответ	 : полученный байт
 ***************************************/
static uint8_t inline I2C_receive(void) {
	uint8_t msg = 0;
	SDA_in();
     cfa:	a4 98       	cbi	0x14, 4	; 20
	for(I2C_counter1 = 0; I2C_counter1 < 7; I2C_counter1++) {
     cfc:	10 92 b5 01 	sts	0x01B5, r1
		}
		_delay_us(I2C_DELAY);
		SCL_out();
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		msg = msg << 1;
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	b1 cf       	rjmp	.-158    	; 0xc66 <I2C_read+0x2f0>

00000d04 <I2C_write>:
	((uint8_t*) data)[count-1] = I2C_receive();
	I2C_send_nack();
	I2C_stop();
}

void I2C_write(uint8_t addr, uint8_t reg, uint8_t * data, uint8_t count) {
     d04:	e8 2f       	mov	r30, r24

/***************************************
 * Функция	 : отправка сигнала "СТАРТ"
 ***************************************/
static void inline I2C_start(void) {
	PORTC &=~ (1<<4);              //Низкий уровень на SDA, если выход
     d06:	ac 98       	cbi	0x15, 4	; 21
	PORTC &=~ (1<<5);              //Низкий уровень на SCL, если выход
     d08:	ad 98       	cbi	0x15, 5	; 21
	SDA_in();
     d0a:	a4 98       	cbi	0x14, 4	; 20
     d0c:	8a e0       	ldi	r24, 0x0A	; 10
     d0e:	8a 95       	dec	r24
     d10:	f1 f7       	brne	.-4      	; 0xd0e <I2C_write+0xa>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <I2C_write+0x10>
	_delay_us(I2C_DELAY);
	SCL_in();
     d14:	a5 98       	cbi	0x14, 5	; 20
     d16:	aa e0       	ldi	r26, 0x0A	; 10
     d18:	aa 95       	dec	r26
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <I2C_write+0x14>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <I2C_write+0x1a>
	_delay_us(I2C_DELAY);
	SDA_out();
     d1e:	a4 9a       	sbi	0x14, 4	; 20
     d20:	ba e0       	ldi	r27, 0x0A	; 10
     d22:	ba 95       	dec	r27
     d24:	f1 f7       	brne	.-4      	; 0xd22 <I2C_write+0x1e>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <I2C_write+0x24>
	_delay_us(I2C_DELAY);
	SCL_out();
     d28:	a5 9a       	sbi	0x14, 5	; 20
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     d2a:	88 e0       	ldi	r24, 0x08	; 8
     d2c:	80 93 b5 01 	sts	0x01B5, r24
		if(msg & (1<<(I2C_counter1 - 1))) {			
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	df 01       	movw	r26, r30
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <I2C_write+0x38>
     d38:	b5 95       	asr	r27
     d3a:	a7 95       	ror	r26
     d3c:	8a 95       	dec	r24
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <I2C_write+0x34>
     d40:	a0 ff       	sbrs	r26, 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <I2C_write+0x44>
			SDA_in();
     d44:	a4 98       	cbi	0x14, 4	; 20
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <I2C_write+0x46>
		}
		else {			
			SDA_out();
     d48:	a4 9a       	sbi	0x14, 4	; 20
     d4a:	ba e0       	ldi	r27, 0x0A	; 10
     d4c:	ba 95       	dec	r27
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <I2C_write+0x48>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <I2C_write+0x4e>
		}
		_delay_us(I2C_DELAY);
		SCL_in();
     d52:	a5 98       	cbi	0x14, 5	; 20
     d54:	8a e0       	ldi	r24, 0x0A	; 10
     d56:	8a 95       	dec	r24
     d58:	f1 f7       	brne	.-4      	; 0xd56 <I2C_write+0x52>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <I2C_write+0x58>
     d5c:	aa e0       	ldi	r26, 0x0A	; 10
     d5e:	aa 95       	dec	r26
     d60:	f1 f7       	brne	.-4      	; 0xd5e <I2C_write+0x5a>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <I2C_write+0x60>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
     d64:	a5 9a       	sbi	0x14, 5	; 20
     d66:	ba e0       	ldi	r27, 0x0A	; 10
     d68:	ba 95       	dec	r27
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <I2C_write+0x64>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <I2C_write+0x6a>
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     d6e:	80 91 b5 01 	lds	r24, 0x01B5
     d72:	81 50       	subi	r24, 0x01	; 1
     d74:	80 93 b5 01 	sts	0x01B5, r24
     d78:	81 11       	cpse	r24, r1
     d7a:	db cf       	rjmp	.-74     	; 0xd32 <I2C_write+0x2e>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
		_delay_us(I2C_DELAY);
	}	
	SCL_in();
     d7c:	a5 98       	cbi	0x14, 5	; 20
	SDA_in();
     d7e:	a4 98       	cbi	0x14, 4	; 20
     d80:	ea e0       	ldi	r30, 0x0A	; 10
     d82:	ea 95       	dec	r30
     d84:	f1 f7       	brne	.-4      	; 0xd82 <I2C_write+0x7e>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <I2C_write+0x84>
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
     d88:	10 92 b5 01 	sts	0x01B5, r1
	while(SDA_pin()) {
     d8c:	9c 99       	sbic	0x13, 4	; 19
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <I2C_write+0x92>
     d90:	0d c0       	rjmp	.+26     	; 0xdac <I2C_write+0xa8>
		if(I2C_counter1 < 200) {
     d92:	88 3c       	cpi	r24, 0xC8	; 200
     d94:	c8 f4       	brcc	.+50     	; 0xdc8 <I2C_write+0xc4>
     d96:	f2 e0       	ldi	r31, 0x02	; 2
     d98:	fa 95       	dec	r31
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <I2C_write+0x94>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <I2C_write+0x9a>
			_delay_us(1);
			I2C_counter1++;
     d9e:	80 91 b5 01 	lds	r24, 0x01B5
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	80 93 b5 01 	sts	0x01B5, r24
	}	
	SCL_in();
	SDA_in();
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
	while(SDA_pin()) {
     da8:	9c 99       	sbic	0x13, 4	; 19
     daa:	f3 cf       	rjmp	.-26     	; 0xd92 <I2C_write+0x8e>
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	8a 95       	dec	r24
     db0:	f1 f7       	brne	.-4      	; 0xdae <I2C_write+0xaa>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <I2C_write+0xb0>
		else {
			return;
		}
	};
	_delay_us(I2C_DELAY);
	SCL_out();
     db4:	a5 9a       	sbi	0x14, 5	; 20
     db6:	aa e0       	ldi	r26, 0x0A	; 10
     db8:	aa 95       	dec	r26
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <I2C_write+0xb4>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <I2C_write+0xba>
	_delay_us(I2C_DELAY);
	SDA_out();
     dbe:	a4 9a       	sbi	0x14, 4	; 20
     dc0:	ba e0       	ldi	r27, 0x0A	; 10
     dc2:	ba 95       	dec	r27
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <I2C_write+0xbe>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <I2C_write+0xc4>
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     dc8:	88 e0       	ldi	r24, 0x08	; 8
     dca:	80 93 b5 01 	sts	0x01B5, r24
		if(msg & (1<<(I2C_counter1 - 1))) {			
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	81 50       	subi	r24, 0x01	; 1
     dd2:	fb 01       	movw	r30, r22
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <I2C_write+0xd6>
     dd6:	f5 95       	asr	r31
     dd8:	e7 95       	ror	r30
     dda:	8a 95       	dec	r24
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <I2C_write+0xd2>
     dde:	e0 ff       	sbrs	r30, 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <I2C_write+0xe2>
			SDA_in();
     de2:	a4 98       	cbi	0x14, 4	; 20
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <I2C_write+0xe4>
		}
		else {			
			SDA_out();
     de6:	a4 9a       	sbi	0x14, 4	; 20
     de8:	fa e0       	ldi	r31, 0x0A	; 10
     dea:	fa 95       	dec	r31
     dec:	f1 f7       	brne	.-4      	; 0xdea <I2C_write+0xe6>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <I2C_write+0xec>
		}
		_delay_us(I2C_DELAY);
		SCL_in();
     df0:	a5 98       	cbi	0x14, 5	; 20
     df2:	8a e0       	ldi	r24, 0x0A	; 10
     df4:	8a 95       	dec	r24
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <I2C_write+0xf0>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <I2C_write+0xf6>
     dfa:	aa e0       	ldi	r26, 0x0A	; 10
     dfc:	aa 95       	dec	r26
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <I2C_write+0xf8>
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <I2C_write+0xfe>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
     e02:	a5 9a       	sbi	0x14, 5	; 20
     e04:	ba e0       	ldi	r27, 0x0A	; 10
     e06:	ba 95       	dec	r27
     e08:	f1 f7       	brne	.-4      	; 0xe06 <I2C_write+0x102>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <I2C_write+0x108>
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     e0c:	80 91 b5 01 	lds	r24, 0x01B5
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	80 93 b5 01 	sts	0x01B5, r24
     e16:	81 11       	cpse	r24, r1
     e18:	db cf       	rjmp	.-74     	; 0xdd0 <I2C_write+0xcc>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
		_delay_us(I2C_DELAY);
	}	
	SCL_in();
     e1a:	a5 98       	cbi	0x14, 5	; 20
	SDA_in();
     e1c:	a4 98       	cbi	0x14, 4	; 20
     e1e:	ea e0       	ldi	r30, 0x0A	; 10
     e20:	ea 95       	dec	r30
     e22:	f1 f7       	brne	.-4      	; 0xe20 <I2C_write+0x11c>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <I2C_write+0x122>
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
     e26:	10 92 b5 01 	sts	0x01B5, r1
	while(SDA_pin()) {
     e2a:	9c 99       	sbic	0x13, 4	; 19
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <I2C_write+0x130>
     e2e:	0d c0       	rjmp	.+26     	; 0xe4a <I2C_write+0x146>
		if(I2C_counter1 < 200) {
     e30:	88 3c       	cpi	r24, 0xC8	; 200
     e32:	c8 f4       	brcc	.+50     	; 0xe66 <I2C_write+0x162>
     e34:	f2 e0       	ldi	r31, 0x02	; 2
     e36:	fa 95       	dec	r31
     e38:	f1 f7       	brne	.-4      	; 0xe36 <I2C_write+0x132>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <I2C_write+0x138>
			_delay_us(1);
			I2C_counter1++;
     e3c:	80 91 b5 01 	lds	r24, 0x01B5
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	80 93 b5 01 	sts	0x01B5, r24
	}	
	SCL_in();
	SDA_in();
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
	while(SDA_pin()) {
     e46:	9c 99       	sbic	0x13, 4	; 19
     e48:	f3 cf       	rjmp	.-26     	; 0xe30 <I2C_write+0x12c>
     e4a:	8a e0       	ldi	r24, 0x0A	; 10
     e4c:	8a 95       	dec	r24
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <I2C_write+0x148>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <I2C_write+0x14e>
		else {
			return;
		}
	};
	_delay_us(I2C_DELAY);
	SCL_out();
     e52:	a5 9a       	sbi	0x14, 5	; 20
     e54:	aa e0       	ldi	r26, 0x0A	; 10
     e56:	aa 95       	dec	r26
     e58:	f1 f7       	brne	.-4      	; 0xe56 <I2C_write+0x152>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <I2C_write+0x158>
	_delay_us(I2C_DELAY);
	SDA_out();
     e5c:	a4 9a       	sbi	0x14, 4	; 20
     e5e:	ba e0       	ldi	r27, 0x0A	; 10
     e60:	ba 95       	dec	r27
     e62:	f1 f7       	brne	.-4      	; 0xe60 <I2C_write+0x15c>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <I2C_write+0x162>

void I2C_write(uint8_t addr, uint8_t reg, uint8_t * data, uint8_t count) {
	I2C_start();
	I2C_transmit(addr);
	I2C_transmit(reg);
	for(I2C_counter2 = 0; I2C_counter2 < count; I2C_counter2++) {
     e66:	10 92 b4 01 	sts	0x01B4, r1
     e6a:	22 23       	and	r18, r18
     e6c:	09 f4       	brne	.+2      	; 0xe70 <I2C_write+0x16c>
     e6e:	5d c0       	rjmp	.+186    	; 0xf2a <I2C_write+0x226>
     e70:	80 e0       	ldi	r24, 0x00	; 0
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     e72:	38 e0       	ldi	r19, 0x08	; 8
void I2C_write(uint8_t addr, uint8_t reg, uint8_t * data, uint8_t count) {
	I2C_start();
	I2C_transmit(addr);
	I2C_transmit(reg);
	for(I2C_counter2 = 0; I2C_counter2 < count; I2C_counter2++) {
		I2C_transmit(((uint8_t*) data)[I2C_counter2]);
     e74:	fa 01       	movw	r30, r20
     e76:	e8 0f       	add	r30, r24
     e78:	f1 1d       	adc	r31, r1
     e7a:	60 81       	ld	r22, Z
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     e7c:	30 93 b5 01 	sts	0x01B5, r19
     e80:	83 2f       	mov	r24, r19
		if(msg & (1<<(I2C_counter1 - 1))) {			
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	fb 01       	movw	r30, r22
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <I2C_write+0x18a>
     e8a:	f5 95       	asr	r31
     e8c:	e7 95       	ror	r30
     e8e:	8a 95       	dec	r24
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <I2C_write+0x186>
     e92:	e0 ff       	sbrs	r30, 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <I2C_write+0x196>
			SDA_in();
     e96:	a4 98       	cbi	0x14, 4	; 20
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <I2C_write+0x198>
		}
		else {			
			SDA_out();
     e9a:	a4 9a       	sbi	0x14, 4	; 20
     e9c:	fa e0       	ldi	r31, 0x0A	; 10
     e9e:	fa 95       	dec	r31
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <I2C_write+0x19a>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <I2C_write+0x1a0>
		}
		_delay_us(I2C_DELAY);
		SCL_in();
     ea4:	a5 98       	cbi	0x14, 5	; 20
     ea6:	8a e0       	ldi	r24, 0x0A	; 10
     ea8:	8a 95       	dec	r24
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <I2C_write+0x1a4>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <I2C_write+0x1aa>
     eae:	aa e0       	ldi	r26, 0x0A	; 10
     eb0:	aa 95       	dec	r26
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <I2C_write+0x1ac>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <I2C_write+0x1b2>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
     eb6:	a5 9a       	sbi	0x14, 5	; 20
     eb8:	ba e0       	ldi	r27, 0x0A	; 10
     eba:	ba 95       	dec	r27
     ebc:	f1 f7       	brne	.-4      	; 0xeba <I2C_write+0x1b6>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <I2C_write+0x1bc>
/***************************************
 * Функция	 : отправка байта
 * Аргументы : байт для отправки
 ***************************************/
static void inline I2C_transmit(uint8_t msg) {
	for(I2C_counter1 = 8; I2C_counter1 > 0; I2C_counter1--) {
     ec0:	80 91 b5 01 	lds	r24, 0x01B5
     ec4:	81 50       	subi	r24, 0x01	; 1
     ec6:	80 93 b5 01 	sts	0x01B5, r24
     eca:	81 11       	cpse	r24, r1
     ecc:	db cf       	rjmp	.-74     	; 0xe84 <I2C_write+0x180>
		_delay_us(I2C_DELAY);
		_delay_us(I2C_DELAY);
		SCL_out();
		_delay_us(I2C_DELAY);
	}	
	SCL_in();
     ece:	a5 98       	cbi	0x14, 5	; 20
	SDA_in();
     ed0:	a4 98       	cbi	0x14, 4	; 20
     ed2:	ea e0       	ldi	r30, 0x0A	; 10
     ed4:	ea 95       	dec	r30
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <I2C_write+0x1d0>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <I2C_write+0x1d6>
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
     eda:	10 92 b5 01 	sts	0x01B5, r1
	while(SDA_pin()) {
     ede:	9c 99       	sbic	0x13, 4	; 19
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <I2C_write+0x1e4>
     ee2:	0d c0       	rjmp	.+26     	; 0xefe <I2C_write+0x1fa>
		if(I2C_counter1 < 200) {
     ee4:	88 3c       	cpi	r24, 0xC8	; 200
     ee6:	c8 f4       	brcc	.+50     	; 0xf1a <I2C_write+0x216>
     ee8:	f2 e0       	ldi	r31, 0x02	; 2
     eea:	fa 95       	dec	r31
     eec:	f1 f7       	brne	.-4      	; 0xeea <I2C_write+0x1e6>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <I2C_write+0x1ec>
			_delay_us(1);
			I2C_counter1++;
     ef0:	80 91 b5 01 	lds	r24, 0x01B5
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	80 93 b5 01 	sts	0x01B5, r24
	}	
	SCL_in();
	SDA_in();
	_delay_us(I2C_DELAY);
	I2C_counter1 = 0;
	while(SDA_pin()) {
     efa:	9c 99       	sbic	0x13, 4	; 19
     efc:	f3 cf       	rjmp	.-26     	; 0xee4 <I2C_write+0x1e0>
     efe:	8a e0       	ldi	r24, 0x0A	; 10
     f00:	8a 95       	dec	r24
     f02:	f1 f7       	brne	.-4      	; 0xf00 <I2C_write+0x1fc>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <I2C_write+0x202>
		else {
			return;
		}
	};
	_delay_us(I2C_DELAY);
	SCL_out();
     f06:	a5 9a       	sbi	0x14, 5	; 20
     f08:	aa e0       	ldi	r26, 0x0A	; 10
     f0a:	aa 95       	dec	r26
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <I2C_write+0x206>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <I2C_write+0x20c>
	_delay_us(I2C_DELAY);
	SDA_out();
     f10:	a4 9a       	sbi	0x14, 4	; 20
     f12:	ba e0       	ldi	r27, 0x0A	; 10
     f14:	ba 95       	dec	r27
     f16:	f1 f7       	brne	.-4      	; 0xf14 <I2C_write+0x210>
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <I2C_write+0x216>

void I2C_write(uint8_t addr, uint8_t reg, uint8_t * data, uint8_t count) {
	I2C_start();
	I2C_transmit(addr);
	I2C_transmit(reg);
	for(I2C_counter2 = 0; I2C_counter2 < count; I2C_counter2++) {
     f1a:	80 91 b4 01 	lds	r24, 0x01B4
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	80 93 b4 01 	sts	0x01B4, r24
     f24:	82 17       	cp	r24, r18
     f26:	08 f4       	brcc	.+2      	; 0xf2a <I2C_write+0x226>
     f28:	a5 cf       	rjmp	.-182    	; 0xe74 <I2C_write+0x170>

/***************************************
 * Функция	 : отправка сигнала "СТОП"
 ***************************************/
static void inline I2C_stop(void) {
	SDA_out();
     f2a:	a4 9a       	sbi	0x14, 4	; 20
     f2c:	ea e0       	ldi	r30, 0x0A	; 10
     f2e:	ea 95       	dec	r30
     f30:	f1 f7       	brne	.-4      	; 0xf2e <I2C_write+0x22a>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <I2C_write+0x230>
	_delay_us(I2C_DELAY);
	SCL_in();
     f34:	a5 98       	cbi	0x14, 5	; 20
     f36:	fa e0       	ldi	r31, 0x0A	; 10
     f38:	fa 95       	dec	r31
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <I2C_write+0x234>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <I2C_write+0x23a>
	_delay_us(I2C_DELAY);
	SDA_in();
     f3e:	a4 98       	cbi	0x14, 4	; 20
     f40:	08 95       	ret

00000f42 <bubbleSort>:
		OCR1B--;
		_delay_ms(2);
	}
}

void bubbleSort(int32_t *a, int size) {
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	7b 01       	movw	r14, r22
	int i, j;
	int32_t tmp;
	for (i = 1; i < size; i++) {
     f54:	62 30       	cpi	r22, 0x02	; 2
     f56:	71 05       	cpc	r23, r1
     f58:	8c f1       	brlt	.+98     	; 0xfbc <bubbleSort+0x7a>
     f5a:	ac 01       	movw	r20, r24
     f5c:	44 50       	subi	r20, 0x04	; 4
     f5e:	51 09       	sbc	r21, r1
     f60:	9b 01       	movw	r18, r22
     f62:	22 0f       	add	r18, r18
     f64:	33 1f       	adc	r19, r19
     f66:	22 0f       	add	r18, r18
     f68:	33 1f       	adc	r19, r19
     f6a:	24 0f       	add	r18, r20
     f6c:	35 1f       	adc	r19, r21
     f6e:	01 e0       	ldi	r16, 0x01	; 1
     f70:	10 e0       	ldi	r17, 0x00	; 0
		OCR1B--;
		_delay_ms(2);
	}
}

void bubbleSort(int32_t *a, int size) {
     f72:	c8 2e       	mov	r12, r24
     f74:	d9 2e       	mov	r13, r25
     f76:	1f c0       	rjmp	.+62     	; 0xfb6 <bubbleSort+0x74>
	int i, j;
	int32_t tmp;
	for (i = 1; i < size; i++) {
		for (j = 1; j < size; j++) {
			if (a[j] > a[j-1]) {
     f78:	84 81       	ldd	r24, Z+4	; 0x04
     f7a:	95 81       	ldd	r25, Z+5	; 0x05
     f7c:	a6 81       	ldd	r26, Z+6	; 0x06
     f7e:	b7 81       	ldd	r27, Z+7	; 0x07
     f80:	41 91       	ld	r20, Z+
     f82:	51 91       	ld	r21, Z+
     f84:	61 91       	ld	r22, Z+
     f86:	71 91       	ld	r23, Z+
     f88:	48 17       	cp	r20, r24
     f8a:	59 07       	cpc	r21, r25
     f8c:	6a 07       	cpc	r22, r26
     f8e:	7b 07       	cpc	r23, r27
     f90:	54 f4       	brge	.+20     	; 0xfa6 <bubbleSort+0x64>
				tmp = a[j];
				a[j] = a[j-1];
     f92:	40 83       	st	Z, r20
     f94:	51 83       	std	Z+1, r21	; 0x01
     f96:	62 83       	std	Z+2, r22	; 0x02
     f98:	73 83       	std	Z+3, r23	; 0x03
     f9a:	ef 01       	movw	r28, r30
     f9c:	24 97       	sbiw	r28, 0x04	; 4
				a[j-1] = tmp;
     f9e:	88 83       	st	Y, r24
     fa0:	99 83       	std	Y+1, r25	; 0x01
     fa2:	aa 83       	std	Y+2, r26	; 0x02
     fa4:	bb 83       	std	Y+3, r27	; 0x03

void bubbleSort(int32_t *a, int size) {
	int i, j;
	int32_t tmp;
	for (i = 1; i < size; i++) {
		for (j = 1; j < size; j++) {
     fa6:	e2 17       	cp	r30, r18
     fa8:	f3 07       	cpc	r31, r19
     faa:	31 f7       	brne	.-52     	; 0xf78 <bubbleSort+0x36>
}

void bubbleSort(int32_t *a, int size) {
	int i, j;
	int32_t tmp;
	for (i = 1; i < size; i++) {
     fac:	0f 5f       	subi	r16, 0xFF	; 255
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	0e 15       	cp	r16, r14
     fb2:	1f 05       	cpc	r17, r15
     fb4:	19 f0       	breq	.+6      	; 0xfbc <bubbleSort+0x7a>
		OCR1B--;
		_delay_ms(2);
	}
}

void bubbleSort(int32_t *a, int size) {
     fb6:	ec 2d       	mov	r30, r12
     fb8:	fd 2d       	mov	r31, r13
     fba:	de cf       	rjmp	.-68     	; 0xf78 <bubbleSort+0x36>
				a[j] = a[j-1];
				a[j-1] = tmp;
			}
		}
	}
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	08 95       	ret

00000fce <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fce:	2f ef       	ldi	r18, 0xFF	; 255
     fd0:	31 e1       	ldi	r19, 0x11	; 17
     fd2:	8a e7       	ldi	r24, 0x7A	; 122
     fd4:	21 50       	subi	r18, 0x01	; 1
     fd6:	30 40       	sbci	r19, 0x00	; 0
     fd8:	80 40       	sbci	r24, 0x00	; 0
     fda:	e1 f7       	brne	.-8      	; 0xfd4 <main+0x6>
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <main+0x10>
     fde:	00 00       	nop

int main(void)
{
	_delay_ms(5000);
	
	DDRB |= (1<<2);	//LED
     fe0:	ba 9a       	sbi	0x17, 2	; 23
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(1<<WGM10);
     fe2:	83 e2       	ldi	r24, 0x23	; 35
     fe4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
     fe6:	8a e0       	ldi	r24, 0x0A	; 10
     fe8:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 0x0000;
     fea:	19 bc       	out	0x29, r1	; 41
     fec:	18 bc       	out	0x28, r1	; 40
uint32_t temp;

uint16_t uptime = 0;

void static inline LED_fadein() {
	while(OCR1B < 0x3FF) {		
     fee:	88 b5       	in	r24, 0x28	; 40
     ff0:	99 b5       	in	r25, 0x29	; 41
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	93 40       	sbci	r25, 0x03	; 3
     ff6:	80 f4       	brcc	.+32     	; 0x1018 <main+0x4a>
		OCR1B++;
     ff8:	88 b5       	in	r24, 0x28	; 40
     ffa:	99 b5       	in	r25, 0x29	; 41
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	99 bd       	out	0x29, r25	; 41
    1000:	88 bd       	out	0x28, r24	; 40
    1002:	8f e9       	ldi	r24, 0x9F	; 159
    1004:	9f e0       	ldi	r25, 0x0F	; 15
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <main+0x38>
    100a:	00 c0       	rjmp	.+0      	; 0x100c <main+0x3e>
    100c:	00 00       	nop
uint32_t temp;

uint16_t uptime = 0;

void static inline LED_fadein() {
	while(OCR1B < 0x3FF) {		
    100e:	88 b5       	in	r24, 0x28	; 40
    1010:	99 b5       	in	r25, 0x29	; 41
    1012:	8f 3f       	cpi	r24, 0xFF	; 255
    1014:	93 40       	sbci	r25, 0x03	; 3
    1016:	80 f3       	brcs	.-32     	; 0xff8 <main+0x2a>
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
	OCR1B = 0x0000;
	LED_fadein();
	
	//ESP8266
	UART_init(76800);
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	7c e2       	ldi	r23, 0x2C	; 44
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	99 d2       	rcall	.+1330   	; 0x1554 <UART_init>
	UBRRH = 0;
    1022:	10 bc       	out	0x20, r1	; 32
	UBRRL = 8;
    1024:	88 e0       	ldi	r24, 0x08	; 8
    1026:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
    1028:	59 9a       	sbi	0x0b, 1	; 11
	UART_send_string("AT+RST\r\n");
    102a:	85 e6       	ldi	r24, 0x65	; 101
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a8 d2       	rcall	.+1360   	; 0x1580 <UART_send_string>
    1030:	ff ef       	ldi	r31, 0xFF	; 255
    1032:	21 e1       	ldi	r18, 0x11	; 17
    1034:	3a e7       	ldi	r19, 0x7A	; 122
    1036:	f1 50       	subi	r31, 0x01	; 1
    1038:	20 40       	sbci	r18, 0x00	; 0
    103a:	30 40       	sbci	r19, 0x00	; 0
    103c:	e1 f7       	brne	.-8      	; 0x1036 <main+0x68>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <main+0x72>
    1040:	00 00       	nop
	_delay_ms(5000);
	
	strcpy(buf, "#cc:50:e3:2b:55:fc\n#uptime#0000\n#DS18B20#000.00\n#DHT11_T#000\n#DHT11_H#00\n#BMP180_T#000.0\n#BMP180_P#0000.00\n##");
    1042:	8e e6       	ldi	r24, 0x6E	; 110
    1044:	ee e6       	ldi	r30, 0x6E	; 110
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	ae ef       	ldi	r26, 0xFE	; 254
    104a:	b1 e0       	ldi	r27, 0x01	; 1
    104c:	01 90       	ld	r0, Z+
    104e:	0d 92       	st	X+, r0
    1050:	8a 95       	dec	r24
    1052:	e1 f7       	brne	.-8      	; 0x104c <main+0x7e>
	
	BMP180_init();
    1054:	04 d8       	rcall	.-4088   	; 0x5e <BMP180_init>
	BMP180_calculation(&BMP_temp, &BMP_press);
    1056:	60 e6       	ldi	r22, 0x60	; 96
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	8a e4       	ldi	r24, 0x4A	; 74
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	f3 d9       	rcall	.-3098   	; 0x446 <BMP180_calculation>
	
	// Initialize Dallas DS18B20
	if(DS18B20_rst() > 0) {
    1060:	dd db       	rcall	.-2118   	; 0x81c <DS18B20_rst>
    1062:	88 23       	and	r24, r24
    1064:	51 f0       	breq	.+20     	; 0x107a <main+0xac>
		DS18B20_write(SKIP_ROM);
    1066:	8c ec       	ldi	r24, 0xCC	; 204
    1068:	f3 db       	rcall	.-2074   	; 0x850 <DS18B20_write>
		DS18B20_write(WRITE_SCRATCHPAD);
    106a:	8e e4       	ldi	r24, 0x4E	; 78
    106c:	f1 db       	rcall	.-2078   	; 0x850 <DS18B20_write>
		DS18B20_write(0xFF);
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	ef db       	rcall	.-2082   	; 0x850 <DS18B20_write>
		DS18B20_write(0xFF);
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	ed db       	rcall	.-2086   	; 0x850 <DS18B20_write>
		DS18B20_write(0x7F);
    1076:	8f e7       	ldi	r24, 0x7F	; 127
    1078:	eb db       	rcall	.-2090   	; 0x850 <DS18B20_write>
		_delay_ms(2);
	}
}

void static inline LED_fadeout() {
	while(OCR1B > 0) {
    107a:	88 b5       	in	r24, 0x28	; 40
    107c:	99 b5       	in	r25, 0x29	; 41
    107e:	89 2b       	or	r24, r25
    1080:	79 f0       	breq	.+30     	; 0x10a0 <main+0xd2>
		OCR1B--;
    1082:	88 b5       	in	r24, 0x28	; 40
    1084:	99 b5       	in	r25, 0x29	; 41
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	99 bd       	out	0x29, r25	; 41
    108a:	88 bd       	out	0x28, r24	; 40
    108c:	8f e9       	ldi	r24, 0x9F	; 159
    108e:	9f e0       	ldi	r25, 0x0F	; 15
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <main+0xc2>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <main+0xc8>
    1096:	00 00       	nop
		_delay_ms(2);
	}
}

void static inline LED_fadeout() {
	while(OCR1B > 0) {
    1098:	88 b5       	in	r24, 0x28	; 40
    109a:	99 b5       	in	r25, 0x29	; 41
    109c:	89 2b       	or	r24, r25
    109e:	89 f7       	brne	.-30     	; 0x1082 <main+0xb4>
    10a0:	0f 2e       	mov	r0, r31
    10a2:	fa ed       	ldi	r31, 0xDA	; 218
    10a4:	af 2e       	mov	r10, r31
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	bf 2e       	mov	r11, r31
    10aa:	f0 2d       	mov	r31, r0
    10ac:	0e ef       	ldi	r16, 0xFE	; 254
    10ae:	11 e0       	ldi	r17, 0x01	; 1
			BMP_press_arr[i] = temp;
			_delay_ms(500);
		}
		
		bubbleSort(&BMP_press_arr, 9);
		BMP_press = BMP_press_arr[4];
    10b0:	0f 2e       	mov	r0, r31
    10b2:	fa ee       	ldi	r31, 0xEA	; 234
    10b4:	8f 2e       	mov	r8, r31
    10b6:	f1 e0       	ldi	r31, 0x01	; 1
    10b8:	9f 2e       	mov	r9, r31
    10ba:	f0 2d       	mov	r31, r0
		
		DHT11_getData(&DHT_temp, &DHT_hum);
		
		temp = uptime;
		buf[30] = temp % 10 + 0x30;
    10bc:	0f 2e       	mov	r0, r31
    10be:	fc e1       	ldi	r31, 0x1C	; 28
    10c0:	6f 2e       	mov	r6, r31
    10c2:	f2 e0       	ldi	r31, 0x02	; 2
    10c4:	7f 2e       	mov	r7, r31
    10c6:	f0 2d       	mov	r31, r0
    10c8:	0f 2e       	mov	r0, r31
    10ca:	fa e0       	ldi	r31, 0x0A	; 10
    10cc:	cf 2e       	mov	r12, r31
    10ce:	d1 2c       	mov	r13, r1
    10d0:	e1 2c       	mov	r14, r1
    10d2:	f1 2c       	mov	r15, r1
    10d4:	f0 2d       	mov	r31, r0
		temp /= 10;
		buf[29] = temp % 10 + 0x30;
    10d6:	0f 2e       	mov	r0, r31
    10d8:	fb e1       	ldi	r31, 0x1B	; 27
    10da:	4f 2e       	mov	r4, r31
    10dc:	f2 e0       	ldi	r31, 0x02	; 2
    10de:	5f 2e       	mov	r5, r31
    10e0:	f0 2d       	mov	r31, r0
		temp /= 10;
		buf[28] = temp % 10 + 0x30;
    10e2:	0f 2e       	mov	r0, r31
    10e4:	fa e1       	ldi	r31, 0x1A	; 26
    10e6:	2f 2e       	mov	r2, r31
    10e8:	f2 e0       	ldi	r31, 0x02	; 2
    10ea:	3f 2e       	mov	r3, r31
    10ec:	f0 2d       	mov	r31, r0
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <main+0x138>

uint16_t uptime = 0;

void static inline LED_fadein() {
	while(OCR1B < 0x3FF) {		
		OCR1B++;
    10f0:	88 b5       	in	r24, 0x28	; 40
    10f2:	99 b5       	in	r25, 0x29	; 41
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	99 bd       	out	0x29, r25	; 41
    10f8:	88 bd       	out	0x28, r24	; 40
    10fa:	ef e9       	ldi	r30, 0x9F	; 159
    10fc:	ff e0       	ldi	r31, 0x0F	; 15
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <main+0x130>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <main+0x136>
    1104:	00 00       	nop
uint32_t temp;

uint16_t uptime = 0;

void static inline LED_fadein() {
	while(OCR1B < 0x3FF) {		
    1106:	88 b5       	in	r24, 0x28	; 40
    1108:	99 b5       	in	r25, 0x29	; 41
    110a:	8f 3f       	cpi	r24, 0xFF	; 255
    110c:	93 40       	sbci	r25, 0x03	; 3
    110e:	80 f3       	brcs	.-32     	; 0x10f0 <main+0x122>
	
    while(1)
    {
	    LED_fadein();		
		
		DS18B20_start_meas();
    1110:	eb db       	rcall	.-2090   	; 0x8e8 <DS18B20_start_meas>
    1112:	2f ef       	ldi	r18, 0xFF	; 255
    1114:	39 e6       	ldi	r19, 0x69	; 105
    1116:	88 e1       	ldi	r24, 0x18	; 24
    1118:	21 50       	subi	r18, 0x01	; 1
    111a:	30 40       	sbci	r19, 0x00	; 0
    111c:	80 40       	sbci	r24, 0x00	; 0
    111e:	e1 f7       	brne	.-8      	; 0x1118 <main+0x14a>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <main+0x154>
    1122:	00 00       	nop
		_delay_ms(1000);
		DS_temp = DS18B20_temperature();
    1124:	e9 db       	rcall	.-2094   	; 0x8f8 <DS18B20_temperature>
    1126:	90 93 49 01 	sts	0x0149, r25
    112a:	80 93 48 01 	sts	0x0148, r24
    112e:	e5 01       	movw	r28, r10
		
		for(int i = 0; i < 9; i++) {
			BMP180_calculation(&BMP_temp, &temp);
    1130:	66 ed       	ldi	r22, 0xD6	; 214
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	8a e4       	ldi	r24, 0x4A	; 74
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	86 d9       	rcall	.-3316   	; 0x446 <BMP180_calculation>
			BMP_press_arr[i] = temp;
    113a:	80 91 d6 01 	lds	r24, 0x01D6
    113e:	90 91 d7 01 	lds	r25, 0x01D7
    1142:	a0 91 d8 01 	lds	r26, 0x01D8
    1146:	b0 91 d9 01 	lds	r27, 0x01D9
    114a:	89 93       	st	Y+, r24
    114c:	99 93       	st	Y+, r25
    114e:	a9 93       	st	Y+, r26
    1150:	b9 93       	st	Y+, r27
    1152:	9f ef       	ldi	r25, 0xFF	; 255
    1154:	e4 e3       	ldi	r30, 0x34	; 52
    1156:	fc e0       	ldi	r31, 0x0C	; 12
    1158:	91 50       	subi	r25, 0x01	; 1
    115a:	e0 40       	sbci	r30, 0x00	; 0
    115c:	f0 40       	sbci	r31, 0x00	; 0
    115e:	e1 f7       	brne	.-8      	; 0x1158 <main+0x18a>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <main+0x194>
    1162:	00 00       	nop
		
		DS18B20_start_meas();
		_delay_ms(1000);
		DS_temp = DS18B20_temperature();
		
		for(int i = 0; i < 9; i++) {
    1164:	c0 17       	cp	r28, r16
    1166:	d1 07       	cpc	r29, r17
    1168:	19 f7       	brne	.-58     	; 0x1130 <main+0x162>
			BMP180_calculation(&BMP_temp, &temp);
			BMP_press_arr[i] = temp;
			_delay_ms(500);
		}
		
		bubbleSort(&BMP_press_arr, 9);
    116a:	69 e0       	ldi	r22, 0x09	; 9
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	c5 01       	movw	r24, r10
    1170:	e8 de       	rcall	.-560    	; 0xf42 <bubbleSort>
		BMP_press = BMP_press_arr[4];
    1172:	f4 01       	movw	r30, r8
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	a2 81       	ldd	r26, Z+2	; 0x02
    117a:	b3 81       	ldd	r27, Z+3	; 0x03
    117c:	80 93 60 00 	sts	0x0060, r24
    1180:	90 93 61 00 	sts	0x0061, r25
    1184:	a0 93 62 00 	sts	0x0062, r26
    1188:	b0 93 63 00 	sts	0x0063, r27
		
		DHT11_getData(&DHT_temp, &DHT_hum);
    118c:	64 e6       	ldi	r22, 0x64	; 100
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	8e e4       	ldi	r24, 0x4E	; 78
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	08 db       	rcall	.-2544   	; 0x7a6 <DHT11_getData>
		
		temp = uptime;
    1196:	60 91 46 01 	lds	r22, 0x0146
    119a:	70 91 47 01 	lds	r23, 0x0147
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
		buf[30] = temp % 10 + 0x30;
    11a2:	a7 01       	movw	r20, r14
    11a4:	96 01       	movw	r18, r12
    11a6:	ea d3       	rcall	.+2004   	; 0x197c <__udivmodsi4>
    11a8:	60 5d       	subi	r22, 0xD0	; 208
    11aa:	f3 01       	movw	r30, r6
    11ac:	60 83       	st	Z, r22
		temp /= 10;
		buf[29] = temp % 10 + 0x30;
    11ae:	ca 01       	movw	r24, r20
    11b0:	b9 01       	movw	r22, r18
    11b2:	a7 01       	movw	r20, r14
    11b4:	96 01       	movw	r18, r12
    11b6:	e2 d3       	rcall	.+1988   	; 0x197c <__udivmodsi4>
    11b8:	60 5d       	subi	r22, 0xD0	; 208
    11ba:	f2 01       	movw	r30, r4
    11bc:	60 83       	st	Z, r22
		temp /= 10;
		buf[28] = temp % 10 + 0x30;
    11be:	ca 01       	movw	r24, r20
    11c0:	b9 01       	movw	r22, r18
    11c2:	a7 01       	movw	r20, r14
    11c4:	96 01       	movw	r18, r12
    11c6:	da d3       	rcall	.+1972   	; 0x197c <__udivmodsi4>
    11c8:	60 5d       	subi	r22, 0xD0	; 208
    11ca:	f1 01       	movw	r30, r2
    11cc:	60 83       	st	Z, r22
		temp /= 10;
		buf[27] = temp % 10 + 0x30;
    11ce:	ca 01       	movw	r24, r20
    11d0:	b9 01       	movw	r22, r18
    11d2:	a7 01       	movw	r20, r14
    11d4:	96 01       	movw	r18, r12
    11d6:	d2 d3       	rcall	.+1956   	; 0x197c <__udivmodsi4>
    11d8:	60 5d       	subi	r22, 0xD0	; 208
    11da:	e9 e1       	ldi	r30, 0x19	; 25
    11dc:	f2 e0       	ldi	r31, 0x02	; 2
    11de:	60 83       	st	Z, r22
		
		if(DS_temp >= 0) {
    11e0:	c0 91 48 01 	lds	r28, 0x0148
    11e4:	d0 91 49 01 	lds	r29, 0x0149
    11e8:	dd 23       	and	r29, r29
    11ea:	74 f0       	brlt	.+28     	; 0x1208 <main+0x23a>
			temp = DS_temp;
    11ec:	ce 01       	movw	r24, r28
    11ee:	aa 27       	eor	r26, r26
    11f0:	97 fd       	sbrc	r25, 7
    11f2:	a0 95       	com	r26
    11f4:	ba 2f       	mov	r27, r26
    11f6:	80 93 d6 01 	sts	0x01D6, r24
    11fa:	90 93 d7 01 	sts	0x01D7, r25
    11fe:	a0 93 d8 01 	sts	0x01D8, r26
    1202:	b0 93 d9 01 	sts	0x01D9, r27
    1206:	10 c0       	rjmp	.+32     	; 0x1228 <main+0x25a>
		}
		else {
			temp = (-1) * DS_temp;
    1208:	88 27       	eor	r24, r24
    120a:	99 27       	eor	r25, r25
    120c:	8c 1b       	sub	r24, r28
    120e:	9d 0b       	sbc	r25, r29
    1210:	aa 27       	eor	r26, r26
    1212:	97 fd       	sbrc	r25, 7
    1214:	a0 95       	com	r26
    1216:	ba 2f       	mov	r27, r26
    1218:	80 93 d6 01 	sts	0x01D6, r24
    121c:	90 93 d7 01 	sts	0x01D7, r25
    1220:	a0 93 d8 01 	sts	0x01D8, r26
    1224:	b0 93 d9 01 	sts	0x01D9, r27
		}
		buf[46] = temp % 10 + 0x30;
    1228:	60 91 d6 01 	lds	r22, 0x01D6
    122c:	70 91 d7 01 	lds	r23, 0x01D7
    1230:	80 91 d8 01 	lds	r24, 0x01D8
    1234:	90 91 d9 01 	lds	r25, 0x01D9
    1238:	a7 01       	movw	r20, r14
    123a:	96 01       	movw	r18, r12
    123c:	9f d3       	rcall	.+1854   	; 0x197c <__udivmodsi4>
    123e:	60 5d       	subi	r22, 0xD0	; 208
    1240:	ec e2       	ldi	r30, 0x2C	; 44
    1242:	f2 e0       	ldi	r31, 0x02	; 2
    1244:	60 83       	st	Z, r22
		temp /= 10;
		buf[45] = temp % 10 + 0x30;
    1246:	ca 01       	movw	r24, r20
    1248:	b9 01       	movw	r22, r18
    124a:	a7 01       	movw	r20, r14
    124c:	96 01       	movw	r18, r12
    124e:	96 d3       	rcall	.+1836   	; 0x197c <__udivmodsi4>
    1250:	60 5d       	subi	r22, 0xD0	; 208
    1252:	eb e2       	ldi	r30, 0x2B	; 43
    1254:	f2 e0       	ldi	r31, 0x02	; 2
    1256:	60 83       	st	Z, r22
		temp /= 10;
		buf[43] = temp % 10 + 0x30;
    1258:	ca 01       	movw	r24, r20
    125a:	b9 01       	movw	r22, r18
    125c:	a7 01       	movw	r20, r14
    125e:	96 01       	movw	r18, r12
    1260:	8d d3       	rcall	.+1818   	; 0x197c <__udivmodsi4>
    1262:	60 5d       	subi	r22, 0xD0	; 208
    1264:	e9 e2       	ldi	r30, 0x29	; 41
    1266:	f2 e0       	ldi	r31, 0x02	; 2
    1268:	60 83       	st	Z, r22
		temp /= 10;
		buf[42] = temp % 10 + 0x30;
    126a:	ca 01       	movw	r24, r20
    126c:	b9 01       	movw	r22, r18
    126e:	a7 01       	movw	r20, r14
    1270:	96 01       	movw	r18, r12
    1272:	84 d3       	rcall	.+1800   	; 0x197c <__udivmodsi4>
    1274:	60 5d       	subi	r22, 0xD0	; 208
    1276:	e8 e2       	ldi	r30, 0x28	; 40
    1278:	f2 e0       	ldi	r31, 0x02	; 2
    127a:	60 83       	st	Z, r22
		if(DS_temp < 0) {
    127c:	dd 23       	and	r29, r29
    127e:	24 f4       	brge	.+8      	; 0x1288 <main+0x2ba>
			buf[41] = '-';
    1280:	8d e2       	ldi	r24, 0x2D	; 45
    1282:	80 93 27 02 	sts	0x0227, r24
    1286:	03 c0       	rjmp	.+6      	; 0x128e <main+0x2c0>
		}
		else {
			buf[41] = '0';
    1288:	80 e3       	ldi	r24, 0x30	; 48
    128a:	80 93 27 02 	sts	0x0227, r24
		}
		
		if(DHT_temp >= 0) {
    128e:	80 91 4e 01 	lds	r24, 0x014E
    1292:	88 23       	and	r24, r24
    1294:	74 f0       	brlt	.+28     	; 0x12b2 <main+0x2e4>
			temp = DHT_temp;
    1296:	99 27       	eor	r25, r25
    1298:	87 fd       	sbrc	r24, 7
    129a:	90 95       	com	r25
    129c:	a9 2f       	mov	r26, r25
    129e:	b9 2f       	mov	r27, r25
    12a0:	80 93 d6 01 	sts	0x01D6, r24
    12a4:	90 93 d7 01 	sts	0x01D7, r25
    12a8:	a0 93 d8 01 	sts	0x01D8, r26
    12ac:	b0 93 d9 01 	sts	0x01D9, r27
    12b0:	10 c0       	rjmp	.+32     	; 0x12d2 <main+0x304>
		}
		else {
			temp = (-1) * DHT_temp;
    12b2:	99 27       	eor	r25, r25
    12b4:	81 95       	neg	r24
    12b6:	0c f4       	brge	.+2      	; 0x12ba <main+0x2ec>
    12b8:	90 95       	com	r25
    12ba:	aa 27       	eor	r26, r26
    12bc:	97 fd       	sbrc	r25, 7
    12be:	a0 95       	com	r26
    12c0:	ba 2f       	mov	r27, r26
    12c2:	80 93 d6 01 	sts	0x01D6, r24
    12c6:	90 93 d7 01 	sts	0x01D7, r25
    12ca:	a0 93 d8 01 	sts	0x01D8, r26
    12ce:	b0 93 d9 01 	sts	0x01D9, r27
		}
		buf[59] = temp % 10 + 0x30;
    12d2:	60 91 d6 01 	lds	r22, 0x01D6
    12d6:	70 91 d7 01 	lds	r23, 0x01D7
    12da:	80 91 d8 01 	lds	r24, 0x01D8
    12de:	90 91 d9 01 	lds	r25, 0x01D9
    12e2:	a7 01       	movw	r20, r14
    12e4:	96 01       	movw	r18, r12
    12e6:	4a d3       	rcall	.+1684   	; 0x197c <__udivmodsi4>
    12e8:	60 5d       	subi	r22, 0xD0	; 208
    12ea:	e9 e3       	ldi	r30, 0x39	; 57
    12ec:	f2 e0       	ldi	r31, 0x02	; 2
    12ee:	60 83       	st	Z, r22
		temp /= 10;
		buf[58] = temp % 10 + 0x30;
    12f0:	ca 01       	movw	r24, r20
    12f2:	b9 01       	movw	r22, r18
    12f4:	a7 01       	movw	r20, r14
    12f6:	96 01       	movw	r18, r12
    12f8:	41 d3       	rcall	.+1666   	; 0x197c <__udivmodsi4>
    12fa:	60 5d       	subi	r22, 0xD0	; 208
    12fc:	60 93 38 02 	sts	0x0238, r22
		if(DS_temp < 0) {
    1300:	dd 23       	and	r29, r29
    1302:	24 f4       	brge	.+8      	; 0x130c <main+0x33e>
			buf[57] = '-';
    1304:	8d e2       	ldi	r24, 0x2D	; 45
    1306:	80 93 37 02 	sts	0x0237, r24
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <main+0x344>
		}
		else {
			buf[57] = '0';
    130c:	80 e3       	ldi	r24, 0x30	; 48
    130e:	80 93 37 02 	sts	0x0237, r24
		}
		
		temp = DHT_hum;
    1312:	60 91 64 00 	lds	r22, 0x0064
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
		buf[71] = temp % 10 + 0x30;
    131c:	a7 01       	movw	r20, r14
    131e:	96 01       	movw	r18, r12
    1320:	2d d3       	rcall	.+1626   	; 0x197c <__udivmodsi4>
    1322:	60 5d       	subi	r22, 0xD0	; 208
    1324:	60 93 45 02 	sts	0x0245, r22
		temp /= 10;
		buf[70] = temp % 10 + 0x30;
    1328:	ca 01       	movw	r24, r20
    132a:	b9 01       	movw	r22, r18
    132c:	a7 01       	movw	r20, r14
    132e:	96 01       	movw	r18, r12
    1330:	25 d3       	rcall	.+1610   	; 0x197c <__udivmodsi4>
    1332:	60 5d       	subi	r22, 0xD0	; 208
    1334:	60 93 44 02 	sts	0x0244, r22
		
		if(BMP_temp >= 0) {
    1338:	80 91 4a 01 	lds	r24, 0x014A
    133c:	90 91 4b 01 	lds	r25, 0x014B
    1340:	a0 91 4c 01 	lds	r26, 0x014C
    1344:	b0 91 4d 01 	lds	r27, 0x014D
    1348:	bb 23       	and	r27, r27
    134a:	4c f0       	brlt	.+18     	; 0x135e <main+0x390>
			temp = BMP_temp;
    134c:	80 93 d6 01 	sts	0x01D6, r24
    1350:	90 93 d7 01 	sts	0x01D7, r25
    1354:	a0 93 d8 01 	sts	0x01D8, r26
    1358:	b0 93 d9 01 	sts	0x01D9, r27
    135c:	0f c0       	rjmp	.+30     	; 0x137c <main+0x3ae>
		}
		else {
			temp = (-1) * BMP_temp;
    135e:	b0 95       	com	r27
    1360:	a0 95       	com	r26
    1362:	90 95       	com	r25
    1364:	81 95       	neg	r24
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	af 4f       	sbci	r26, 0xFF	; 255
    136a:	bf 4f       	sbci	r27, 0xFF	; 255
    136c:	80 93 d6 01 	sts	0x01D6, r24
    1370:	90 93 d7 01 	sts	0x01D7, r25
    1374:	a0 93 d8 01 	sts	0x01D8, r26
    1378:	b0 93 d9 01 	sts	0x01D9, r27
		}
		buf[87] = temp % 10 + 0x30;
    137c:	60 91 d6 01 	lds	r22, 0x01D6
    1380:	70 91 d7 01 	lds	r23, 0x01D7
    1384:	80 91 d8 01 	lds	r24, 0x01D8
    1388:	90 91 d9 01 	lds	r25, 0x01D9
    138c:	a7 01       	movw	r20, r14
    138e:	96 01       	movw	r18, r12
    1390:	f5 d2       	rcall	.+1514   	; 0x197c <__udivmodsi4>
    1392:	60 5d       	subi	r22, 0xD0	; 208
    1394:	60 93 55 02 	sts	0x0255, r22
		temp /= 10;
		buf[85] = temp % 10 + 0x30;
    1398:	ca 01       	movw	r24, r20
    139a:	b9 01       	movw	r22, r18
    139c:	a7 01       	movw	r20, r14
    139e:	96 01       	movw	r18, r12
    13a0:	ed d2       	rcall	.+1498   	; 0x197c <__udivmodsi4>
    13a2:	60 5d       	subi	r22, 0xD0	; 208
    13a4:	60 93 53 02 	sts	0x0253, r22
		temp /= 10;
		buf[84] = temp % 10 + 0x30;
    13a8:	ca 01       	movw	r24, r20
    13aa:	b9 01       	movw	r22, r18
    13ac:	a7 01       	movw	r20, r14
    13ae:	96 01       	movw	r18, r12
    13b0:	e5 d2       	rcall	.+1482   	; 0x197c <__udivmodsi4>
    13b2:	60 5d       	subi	r22, 0xD0	; 208
    13b4:	60 93 52 02 	sts	0x0252, r22
		if(DS_temp < 0) {
    13b8:	dd 23       	and	r29, r29
    13ba:	24 f4       	brge	.+8      	; 0x13c4 <main+0x3f6>
			buf[83] = '-';
    13bc:	8d e2       	ldi	r24, 0x2D	; 45
    13be:	80 93 51 02 	sts	0x0251, r24
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <main+0x3fc>
		}
		else {
			buf[83] = '0';
    13c4:	80 e3       	ldi	r24, 0x30	; 48
    13c6:	80 93 51 02 	sts	0x0251, r24
		}
		
		temp = BMP_press;
    13ca:	60 91 60 00 	lds	r22, 0x0060
    13ce:	70 91 61 00 	lds	r23, 0x0061
    13d2:	80 91 62 00 	lds	r24, 0x0062
    13d6:	90 91 63 00 	lds	r25, 0x0063
		buf[105] = temp % 10 + 0x30;
    13da:	a7 01       	movw	r20, r14
    13dc:	96 01       	movw	r18, r12
    13de:	ce d2       	rcall	.+1436   	; 0x197c <__udivmodsi4>
    13e0:	60 5d       	subi	r22, 0xD0	; 208
    13e2:	60 93 67 02 	sts	0x0267, r22
		temp /= 10;
		buf[104] = temp % 10 + 0x30;
    13e6:	ca 01       	movw	r24, r20
    13e8:	b9 01       	movw	r22, r18
    13ea:	a7 01       	movw	r20, r14
    13ec:	96 01       	movw	r18, r12
    13ee:	c6 d2       	rcall	.+1420   	; 0x197c <__udivmodsi4>
    13f0:	60 5d       	subi	r22, 0xD0	; 208
    13f2:	60 93 66 02 	sts	0x0266, r22
		temp /= 10;
		buf[102] = temp % 10 + 0x30;
    13f6:	ca 01       	movw	r24, r20
    13f8:	b9 01       	movw	r22, r18
    13fa:	a7 01       	movw	r20, r14
    13fc:	96 01       	movw	r18, r12
    13fe:	be d2       	rcall	.+1404   	; 0x197c <__udivmodsi4>
    1400:	60 5d       	subi	r22, 0xD0	; 208
    1402:	60 93 64 02 	sts	0x0264, r22
		temp /= 10;
		buf[101] = temp % 10 + 0x30;
    1406:	ca 01       	movw	r24, r20
    1408:	b9 01       	movw	r22, r18
    140a:	a7 01       	movw	r20, r14
    140c:	96 01       	movw	r18, r12
    140e:	b6 d2       	rcall	.+1388   	; 0x197c <__udivmodsi4>
    1410:	60 5d       	subi	r22, 0xD0	; 208
    1412:	60 93 63 02 	sts	0x0263, r22
		temp /= 10;
		buf[100] = temp % 10 + 0x30;
    1416:	ca 01       	movw	r24, r20
    1418:	b9 01       	movw	r22, r18
    141a:	a7 01       	movw	r20, r14
    141c:	96 01       	movw	r18, r12
    141e:	ae d2       	rcall	.+1372   	; 0x197c <__udivmodsi4>
    1420:	60 5d       	subi	r22, 0xD0	; 208
    1422:	60 93 62 02 	sts	0x0262, r22
		temp /= 10;
    1426:	20 93 d6 01 	sts	0x01D6, r18
    142a:	30 93 d7 01 	sts	0x01D7, r19
    142e:	40 93 d8 01 	sts	0x01D8, r20
    1432:	50 93 d9 01 	sts	0x01D9, r21
		buf[99] = temp % 10 + 0x30;
    1436:	ca 01       	movw	r24, r20
    1438:	b9 01       	movw	r22, r18
    143a:	a7 01       	movw	r20, r14
    143c:	96 01       	movw	r18, r12
    143e:	9e d2       	rcall	.+1340   	; 0x197c <__udivmodsi4>
    1440:	60 5d       	subi	r22, 0xD0	; 208
    1442:	60 93 61 02 	sts	0x0261, r22
		
		UART_send_string("AT+CWJAP=\"DubosSouth\",\"dubos2018\"\r\n");
    1446:	8c ed       	ldi	r24, 0xDC	; 220
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9a d0       	rcall	.+308    	; 0x1580 <UART_send_string>
    144c:	ff ef       	ldi	r31, 0xFF	; 255
    144e:	21 e1       	ldi	r18, 0x11	; 17
    1450:	3a e7       	ldi	r19, 0x7A	; 122
    1452:	f1 50       	subi	r31, 0x01	; 1
    1454:	20 40       	sbci	r18, 0x00	; 0
    1456:	30 40       	sbci	r19, 0x00	; 0
    1458:	e1 f7       	brne	.-8      	; 0x1452 <main+0x484>
    145a:	00 c0       	rjmp	.+0      	; 0x145c <main+0x48e>
    145c:	00 00       	nop
		_delay_ms(5000);
		UART_send_string("AT+CIPMUX=0\r\n");
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	8e d0       	rcall	.+284    	; 0x1580 <UART_send_string>
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	90 e7       	ldi	r25, 0x70	; 112
    1468:	e2 e0       	ldi	r30, 0x02	; 2
    146a:	81 50       	subi	r24, 0x01	; 1
    146c:	90 40       	sbci	r25, 0x00	; 0
    146e:	e0 40       	sbci	r30, 0x00	; 0
    1470:	e1 f7       	brne	.-8      	; 0x146a <main+0x49c>
    1472:	00 c0       	rjmp	.+0      	; 0x1474 <main+0x4a6>
    1474:	00 00       	nop
		_delay_ms(100);
	    UART_send_string("AT+CIPSTART=\"TCP\",\"narodmon.ru\",8283\r\n");
    1476:	8e e0       	ldi	r24, 0x0E	; 14
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	82 d0       	rcall	.+260    	; 0x1580 <UART_send_string>
    147c:	ff ef       	ldi	r31, 0xFF	; 255
    147e:	20 e7       	ldi	r18, 0x70	; 112
    1480:	32 e0       	ldi	r19, 0x02	; 2
    1482:	f1 50       	subi	r31, 0x01	; 1
    1484:	20 40       	sbci	r18, 0x00	; 0
    1486:	30 40       	sbci	r19, 0x00	; 0
    1488:	e1 f7       	brne	.-8      	; 0x1482 <main+0x4b4>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <main+0x4be>
    148c:	00 00       	nop
	    _delay_ms(100);
	    UART_send_string("AT+CIPSEND=109\r\n");
    148e:	85 e3       	ldi	r24, 0x35	; 53
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	76 d0       	rcall	.+236    	; 0x1580 <UART_send_string>
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	90 e7       	ldi	r25, 0x70	; 112
    1498:	e2 e0       	ldi	r30, 0x02	; 2
    149a:	81 50       	subi	r24, 0x01	; 1
    149c:	90 40       	sbci	r25, 0x00	; 0
    149e:	e0 40       	sbci	r30, 0x00	; 0
    14a0:	e1 f7       	brne	.-8      	; 0x149a <main+0x4cc>
    14a2:	00 c0       	rjmp	.+0      	; 0x14a4 <main+0x4d6>
    14a4:	00 00       	nop
	    _delay_ms(100);
	    UART_send_string(buf);
    14a6:	8e ef       	ldi	r24, 0xFE	; 254
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	6a d0       	rcall	.+212    	; 0x1580 <UART_send_string>
		uptime++;
    14ac:	80 91 46 01 	lds	r24, 0x0146
    14b0:	90 91 47 01 	lds	r25, 0x0147
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	90 93 47 01 	sts	0x0147, r25
    14ba:	80 93 46 01 	sts	0x0146, r24
		_delay_ms(2);
	}
}

void static inline LED_fadeout() {
	while(OCR1B > 0) {
    14be:	88 b5       	in	r24, 0x28	; 40
    14c0:	99 b5       	in	r25, 0x29	; 41
    14c2:	89 2b       	or	r24, r25
    14c4:	79 f0       	breq	.+30     	; 0x14e4 <main+0x516>
		OCR1B--;
    14c6:	88 b5       	in	r24, 0x28	; 40
    14c8:	99 b5       	in	r25, 0x29	; 41
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	99 bd       	out	0x29, r25	; 41
    14ce:	88 bd       	out	0x28, r24	; 40
    14d0:	8f e9       	ldi	r24, 0x9F	; 159
    14d2:	9f e0       	ldi	r25, 0x0F	; 15
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <main+0x506>
    14d8:	00 c0       	rjmp	.+0      	; 0x14da <main+0x50c>
    14da:	00 00       	nop
		_delay_ms(2);
	}
}

void static inline LED_fadeout() {
	while(OCR1B > 0) {
    14dc:	88 b5       	in	r24, 0x28	; 40
    14de:	99 b5       	in	r25, 0x29	; 41
    14e0:	89 2b       	or	r24, r25
    14e2:	89 f7       	brne	.-30     	; 0x14c6 <main+0x4f8>
    14e4:	9f ef       	ldi	r25, 0xFF	; 255
    14e6:	e3 eb       	ldi	r30, 0xB3	; 179
    14e8:	f4 ec       	ldi	r31, 0xC4	; 196
    14ea:	24 e0       	ldi	r18, 0x04	; 4
    14ec:	91 50       	subi	r25, 0x01	; 1
    14ee:	e0 40       	sbci	r30, 0x00	; 0
    14f0:	f0 40       	sbci	r31, 0x00	; 0
    14f2:	20 40       	sbci	r18, 0x00	; 0
    14f4:	d9 f7       	brne	.-10     	; 0x14ec <main+0x51e>
    14f6:	00 c0       	rjmp	.+0      	; 0x14f8 <main+0x52a>
    14f8:	00 00       	nop
    14fa:	3f ef       	ldi	r19, 0xFF	; 255
    14fc:	83 eb       	ldi	r24, 0xB3	; 179
    14fe:	94 ec       	ldi	r25, 0xC4	; 196
    1500:	e4 e0       	ldi	r30, 0x04	; 4
    1502:	31 50       	subi	r19, 0x01	; 1
    1504:	80 40       	sbci	r24, 0x00	; 0
    1506:	90 40       	sbci	r25, 0x00	; 0
    1508:	e0 40       	sbci	r30, 0x00	; 0
    150a:	d9 f7       	brne	.-10     	; 0x1502 <main+0x534>
    150c:	00 c0       	rjmp	.+0      	; 0x150e <main+0x540>
    150e:	00 00       	nop
    1510:	ff ef       	ldi	r31, 0xFF	; 255
    1512:	23 eb       	ldi	r18, 0xB3	; 179
    1514:	34 ec       	ldi	r19, 0xC4	; 196
    1516:	84 e0       	ldi	r24, 0x04	; 4
    1518:	f1 50       	subi	r31, 0x01	; 1
    151a:	20 40       	sbci	r18, 0x00	; 0
    151c:	30 40       	sbci	r19, 0x00	; 0
    151e:	80 40       	sbci	r24, 0x00	; 0
    1520:	d9 f7       	brne	.-10     	; 0x1518 <main+0x54a>
    1522:	00 c0       	rjmp	.+0      	; 0x1524 <main+0x556>
    1524:	00 00       	nop
    1526:	9f ef       	ldi	r25, 0xFF	; 255
    1528:	e3 eb       	ldi	r30, 0xB3	; 179
    152a:	f4 ec       	ldi	r31, 0xC4	; 196
    152c:	24 e0       	ldi	r18, 0x04	; 4
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	e0 40       	sbci	r30, 0x00	; 0
    1532:	f0 40       	sbci	r31, 0x00	; 0
    1534:	20 40       	sbci	r18, 0x00	; 0
    1536:	d9 f7       	brne	.-10     	; 0x152e <main+0x560>
    1538:	00 c0       	rjmp	.+0      	; 0x153a <main+0x56c>
    153a:	00 00       	nop
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	83 eb       	ldi	r24, 0xB3	; 179
    1540:	94 ec       	ldi	r25, 0xC4	; 196
    1542:	e4 e0       	ldi	r30, 0x04	; 4
    1544:	31 50       	subi	r19, 0x01	; 1
    1546:	80 40       	sbci	r24, 0x00	; 0
    1548:	90 40       	sbci	r25, 0x00	; 0
    154a:	e0 40       	sbci	r30, 0x00	; 0
    154c:	d9 f7       	brne	.-10     	; 0x1544 <main+0x576>
    154e:	00 c0       	rjmp	.+0      	; 0x1550 <main+0x582>
    1550:	00 00       	nop
    1552:	d9 cd       	rjmp	.-1102   	; 0x1106 <main+0x138>

00001554 <UART_init>:
 * Функция	: инициализация UART
 * Аргумент	: baudrate (300, 600, 1 200, 2 400, 4 800, 9 600, 19 200,
			  38 400, 57 600, 115 200, 230 400, 460 800, 921 600)
 ********************************************************************/
void UART_init(uint32_t baud) {
	uint8_t ubrr = F_CPU / 16 / (baud-1);
    1554:	9b 01       	movw	r18, r22
    1556:	ac 01       	movw	r20, r24
    1558:	21 50       	subi	r18, 0x01	; 1
    155a:	31 09       	sbc	r19, r1
    155c:	41 09       	sbc	r20, r1
    155e:	51 09       	sbc	r21, r1
    1560:	60 e2       	ldi	r22, 0x20	; 32
    1562:	71 ea       	ldi	r23, 0xA1	; 161
    1564:	87 e0       	ldi	r24, 0x07	; 7
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	09 d2       	rcall	.+1042   	; 0x197c <__udivmodsi4>
	/*Set baud rate */
	UBRRH = (unsigned char) (ubrr>>8);
    156a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) ubrr;
    156c:	29 b9       	out	0x09, r18	; 9
	/*Enable receiver and transmitter */
	UCSRB = (1<<TXEN);
    156e:	88 e0       	ldi	r24, 0x08	; 8
    1570:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
    1572:	8e e8       	ldi	r24, 0x8E	; 142
    1574:	80 bd       	out	0x20, r24	; 32
    1576:	08 95       	ret

00001578 <UART_send>:
/********************************************************************
 * Функция	: отправка байта
 * Аргумент	: байт для отправки
 ********************************************************************/
void UART_send(uint8_t s) {
	while(!(UCSRA & (1<<UDRE))) {};
    1578:	5d 9b       	sbis	0x0b, 5	; 11
    157a:	fe cf       	rjmp	.-4      	; 0x1578 <UART_send>
	UDR = s;
    157c:	8c b9       	out	0x0c, r24	; 12
    157e:	08 95       	ret

00001580 <UART_send_string>:

/********************************************************************
 * Функция	: отправка строки
 * Аргумент	: строка для отправки
 ********************************************************************/
void UART_send_string(uint8_t *data) {
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
	uint8_t c;
	while(( c = *data++ )) {
    1584:	ec 01       	movw	r28, r24
    1586:	21 96       	adiw	r28, 0x01	; 1
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	88 23       	and	r24, r24
    158e:	21 f0       	breq	.+8      	; 0x1598 <UART_send_string+0x18>
		UART_send(c);
    1590:	f3 df       	rcall	.-26     	; 0x1578 <UART_send>
 * Функция	: отправка строки
 * Аргумент	: строка для отправки
 ********************************************************************/
void UART_send_string(uint8_t *data) {
	uint8_t c;
	while(( c = *data++ )) {
    1592:	89 91       	ld	r24, Y+
    1594:	81 11       	cpse	r24, r1
    1596:	fc cf       	rjmp	.-8      	; 0x1590 <UART_send_string+0x10>
		UART_send(c);
	}
}
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <__subsf3>:
    159e:	50 58       	subi	r21, 0x80	; 128

000015a0 <__addsf3>:
    15a0:	bb 27       	eor	r27, r27
    15a2:	aa 27       	eor	r26, r26
    15a4:	0e d0       	rcall	.+28     	; 0x15c2 <__addsf3x>
    15a6:	4d c1       	rjmp	.+666    	; 0x1842 <__fp_round>
    15a8:	3e d1       	rcall	.+636    	; 0x1826 <__fp_pscA>
    15aa:	30 f0       	brcs	.+12     	; 0x15b8 <__addsf3+0x18>
    15ac:	43 d1       	rcall	.+646    	; 0x1834 <__fp_pscB>
    15ae:	20 f0       	brcs	.+8      	; 0x15b8 <__addsf3+0x18>
    15b0:	31 f4       	brne	.+12     	; 0x15be <__addsf3+0x1e>
    15b2:	9f 3f       	cpi	r25, 0xFF	; 255
    15b4:	11 f4       	brne	.+4      	; 0x15ba <__addsf3+0x1a>
    15b6:	1e f4       	brtc	.+6      	; 0x15be <__addsf3+0x1e>
    15b8:	33 c1       	rjmp	.+614    	; 0x1820 <__fp_nan>
    15ba:	0e f4       	brtc	.+2      	; 0x15be <__addsf3+0x1e>
    15bc:	e0 95       	com	r30
    15be:	e7 fb       	bst	r30, 7
    15c0:	29 c1       	rjmp	.+594    	; 0x1814 <__fp_inf>

000015c2 <__addsf3x>:
    15c2:	e9 2f       	mov	r30, r25
    15c4:	4f d1       	rcall	.+670    	; 0x1864 <__fp_split3>
    15c6:	80 f3       	brcs	.-32     	; 0x15a8 <__addsf3+0x8>
    15c8:	ba 17       	cp	r27, r26
    15ca:	62 07       	cpc	r22, r18
    15cc:	73 07       	cpc	r23, r19
    15ce:	84 07       	cpc	r24, r20
    15d0:	95 07       	cpc	r25, r21
    15d2:	18 f0       	brcs	.+6      	; 0x15da <__addsf3x+0x18>
    15d4:	71 f4       	brne	.+28     	; 0x15f2 <__addsf3x+0x30>
    15d6:	9e f5       	brtc	.+102    	; 0x163e <__addsf3x+0x7c>
    15d8:	67 c1       	rjmp	.+718    	; 0x18a8 <__fp_zero>
    15da:	0e f4       	brtc	.+2      	; 0x15de <__addsf3x+0x1c>
    15dc:	e0 95       	com	r30
    15de:	0b 2e       	mov	r0, r27
    15e0:	ba 2f       	mov	r27, r26
    15e2:	a0 2d       	mov	r26, r0
    15e4:	0b 01       	movw	r0, r22
    15e6:	b9 01       	movw	r22, r18
    15e8:	90 01       	movw	r18, r0
    15ea:	0c 01       	movw	r0, r24
    15ec:	ca 01       	movw	r24, r20
    15ee:	a0 01       	movw	r20, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	ff 27       	eor	r31, r31
    15f4:	59 1b       	sub	r21, r25
    15f6:	99 f0       	breq	.+38     	; 0x161e <__addsf3x+0x5c>
    15f8:	59 3f       	cpi	r21, 0xF9	; 249
    15fa:	50 f4       	brcc	.+20     	; 0x1610 <__addsf3x+0x4e>
    15fc:	50 3e       	cpi	r21, 0xE0	; 224
    15fe:	68 f1       	brcs	.+90     	; 0x165a <__addsf3x+0x98>
    1600:	1a 16       	cp	r1, r26
    1602:	f0 40       	sbci	r31, 0x00	; 0
    1604:	a2 2f       	mov	r26, r18
    1606:	23 2f       	mov	r18, r19
    1608:	34 2f       	mov	r19, r20
    160a:	44 27       	eor	r20, r20
    160c:	58 5f       	subi	r21, 0xF8	; 248
    160e:	f3 cf       	rjmp	.-26     	; 0x15f6 <__addsf3x+0x34>
    1610:	46 95       	lsr	r20
    1612:	37 95       	ror	r19
    1614:	27 95       	ror	r18
    1616:	a7 95       	ror	r26
    1618:	f0 40       	sbci	r31, 0x00	; 0
    161a:	53 95       	inc	r21
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__addsf3x+0x4e>
    161e:	7e f4       	brtc	.+30     	; 0x163e <__addsf3x+0x7c>
    1620:	1f 16       	cp	r1, r31
    1622:	ba 0b       	sbc	r27, r26
    1624:	62 0b       	sbc	r22, r18
    1626:	73 0b       	sbc	r23, r19
    1628:	84 0b       	sbc	r24, r20
    162a:	ba f0       	brmi	.+46     	; 0x165a <__addsf3x+0x98>
    162c:	91 50       	subi	r25, 0x01	; 1
    162e:	a1 f0       	breq	.+40     	; 0x1658 <__addsf3x+0x96>
    1630:	ff 0f       	add	r31, r31
    1632:	bb 1f       	adc	r27, r27
    1634:	66 1f       	adc	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	88 1f       	adc	r24, r24
    163a:	c2 f7       	brpl	.-16     	; 0x162c <__addsf3x+0x6a>
    163c:	0e c0       	rjmp	.+28     	; 0x165a <__addsf3x+0x98>
    163e:	ba 0f       	add	r27, r26
    1640:	62 1f       	adc	r22, r18
    1642:	73 1f       	adc	r23, r19
    1644:	84 1f       	adc	r24, r20
    1646:	48 f4       	brcc	.+18     	; 0x165a <__addsf3x+0x98>
    1648:	87 95       	ror	r24
    164a:	77 95       	ror	r23
    164c:	67 95       	ror	r22
    164e:	b7 95       	ror	r27
    1650:	f7 95       	ror	r31
    1652:	9e 3f       	cpi	r25, 0xFE	; 254
    1654:	08 f0       	brcs	.+2      	; 0x1658 <__addsf3x+0x96>
    1656:	b3 cf       	rjmp	.-154    	; 0x15be <__addsf3+0x1e>
    1658:	93 95       	inc	r25
    165a:	88 0f       	add	r24, r24
    165c:	08 f0       	brcs	.+2      	; 0x1660 <__addsf3x+0x9e>
    165e:	99 27       	eor	r25, r25
    1660:	ee 0f       	add	r30, r30
    1662:	97 95       	ror	r25
    1664:	87 95       	ror	r24
    1666:	08 95       	ret

00001668 <__divsf3>:
    1668:	0c d0       	rcall	.+24     	; 0x1682 <__divsf3x>
    166a:	eb c0       	rjmp	.+470    	; 0x1842 <__fp_round>
    166c:	e3 d0       	rcall	.+454    	; 0x1834 <__fp_pscB>
    166e:	40 f0       	brcs	.+16     	; 0x1680 <__divsf3+0x18>
    1670:	da d0       	rcall	.+436    	; 0x1826 <__fp_pscA>
    1672:	30 f0       	brcs	.+12     	; 0x1680 <__divsf3+0x18>
    1674:	21 f4       	brne	.+8      	; 0x167e <__divsf3+0x16>
    1676:	5f 3f       	cpi	r21, 0xFF	; 255
    1678:	19 f0       	breq	.+6      	; 0x1680 <__divsf3+0x18>
    167a:	cc c0       	rjmp	.+408    	; 0x1814 <__fp_inf>
    167c:	51 11       	cpse	r21, r1
    167e:	15 c1       	rjmp	.+554    	; 0x18aa <__fp_szero>
    1680:	cf c0       	rjmp	.+414    	; 0x1820 <__fp_nan>

00001682 <__divsf3x>:
    1682:	f0 d0       	rcall	.+480    	; 0x1864 <__fp_split3>
    1684:	98 f3       	brcs	.-26     	; 0x166c <__divsf3+0x4>

00001686 <__divsf3_pse>:
    1686:	99 23       	and	r25, r25
    1688:	c9 f3       	breq	.-14     	; 0x167c <__divsf3+0x14>
    168a:	55 23       	and	r21, r21
    168c:	b1 f3       	breq	.-20     	; 0x167a <__divsf3+0x12>
    168e:	95 1b       	sub	r25, r21
    1690:	55 0b       	sbc	r21, r21
    1692:	bb 27       	eor	r27, r27
    1694:	aa 27       	eor	r26, r26
    1696:	62 17       	cp	r22, r18
    1698:	73 07       	cpc	r23, r19
    169a:	84 07       	cpc	r24, r20
    169c:	38 f0       	brcs	.+14     	; 0x16ac <__divsf3_pse+0x26>
    169e:	9f 5f       	subi	r25, 0xFF	; 255
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	22 0f       	add	r18, r18
    16a4:	33 1f       	adc	r19, r19
    16a6:	44 1f       	adc	r20, r20
    16a8:	aa 1f       	adc	r26, r26
    16aa:	a9 f3       	breq	.-22     	; 0x1696 <__divsf3_pse+0x10>
    16ac:	33 d0       	rcall	.+102    	; 0x1714 <__divsf3_pse+0x8e>
    16ae:	0e 2e       	mov	r0, r30
    16b0:	3a f0       	brmi	.+14     	; 0x16c0 <__divsf3_pse+0x3a>
    16b2:	e0 e8       	ldi	r30, 0x80	; 128
    16b4:	30 d0       	rcall	.+96     	; 0x1716 <__divsf3_pse+0x90>
    16b6:	91 50       	subi	r25, 0x01	; 1
    16b8:	50 40       	sbci	r21, 0x00	; 0
    16ba:	e6 95       	lsr	r30
    16bc:	00 1c       	adc	r0, r0
    16be:	ca f7       	brpl	.-14     	; 0x16b2 <__divsf3_pse+0x2c>
    16c0:	29 d0       	rcall	.+82     	; 0x1714 <__divsf3_pse+0x8e>
    16c2:	fe 2f       	mov	r31, r30
    16c4:	27 d0       	rcall	.+78     	; 0x1714 <__divsf3_pse+0x8e>
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	88 1f       	adc	r24, r24
    16cc:	bb 1f       	adc	r27, r27
    16ce:	26 17       	cp	r18, r22
    16d0:	37 07       	cpc	r19, r23
    16d2:	48 07       	cpc	r20, r24
    16d4:	ab 07       	cpc	r26, r27
    16d6:	b0 e8       	ldi	r27, 0x80	; 128
    16d8:	09 f0       	breq	.+2      	; 0x16dc <__divsf3_pse+0x56>
    16da:	bb 0b       	sbc	r27, r27
    16dc:	80 2d       	mov	r24, r0
    16de:	bf 01       	movw	r22, r30
    16e0:	ff 27       	eor	r31, r31
    16e2:	93 58       	subi	r25, 0x83	; 131
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	2a f0       	brmi	.+10     	; 0x16f2 <__divsf3_pse+0x6c>
    16e8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ea:	51 05       	cpc	r21, r1
    16ec:	68 f0       	brcs	.+26     	; 0x1708 <__divsf3_pse+0x82>
    16ee:	92 c0       	rjmp	.+292    	; 0x1814 <__fp_inf>
    16f0:	dc c0       	rjmp	.+440    	; 0x18aa <__fp_szero>
    16f2:	5f 3f       	cpi	r21, 0xFF	; 255
    16f4:	ec f3       	brlt	.-6      	; 0x16f0 <__divsf3_pse+0x6a>
    16f6:	98 3e       	cpi	r25, 0xE8	; 232
    16f8:	dc f3       	brlt	.-10     	; 0x16f0 <__divsf3_pse+0x6a>
    16fa:	86 95       	lsr	r24
    16fc:	77 95       	ror	r23
    16fe:	67 95       	ror	r22
    1700:	b7 95       	ror	r27
    1702:	f7 95       	ror	r31
    1704:	9f 5f       	subi	r25, 0xFF	; 255
    1706:	c9 f7       	brne	.-14     	; 0x16fa <__divsf3_pse+0x74>
    1708:	88 0f       	add	r24, r24
    170a:	91 1d       	adc	r25, r1
    170c:	96 95       	lsr	r25
    170e:	87 95       	ror	r24
    1710:	97 f9       	bld	r25, 7
    1712:	08 95       	ret
    1714:	e1 e0       	ldi	r30, 0x01	; 1
    1716:	66 0f       	add	r22, r22
    1718:	77 1f       	adc	r23, r23
    171a:	88 1f       	adc	r24, r24
    171c:	bb 1f       	adc	r27, r27
    171e:	62 17       	cp	r22, r18
    1720:	73 07       	cpc	r23, r19
    1722:	84 07       	cpc	r24, r20
    1724:	ba 07       	cpc	r27, r26
    1726:	20 f0       	brcs	.+8      	; 0x1730 <__divsf3_pse+0xaa>
    1728:	62 1b       	sub	r22, r18
    172a:	73 0b       	sbc	r23, r19
    172c:	84 0b       	sbc	r24, r20
    172e:	ba 0b       	sbc	r27, r26
    1730:	ee 1f       	adc	r30, r30
    1732:	88 f7       	brcc	.-30     	; 0x1716 <__divsf3_pse+0x90>
    1734:	e0 95       	com	r30
    1736:	08 95       	ret

00001738 <__fixsfsi>:
    1738:	04 d0       	rcall	.+8      	; 0x1742 <__fixunssfsi>
    173a:	68 94       	set
    173c:	b1 11       	cpse	r27, r1
    173e:	b5 c0       	rjmp	.+362    	; 0x18aa <__fp_szero>
    1740:	08 95       	ret

00001742 <__fixunssfsi>:
    1742:	98 d0       	rcall	.+304    	; 0x1874 <__fp_splitA>
    1744:	88 f0       	brcs	.+34     	; 0x1768 <__fixunssfsi+0x26>
    1746:	9f 57       	subi	r25, 0x7F	; 127
    1748:	90 f0       	brcs	.+36     	; 0x176e <__fixunssfsi+0x2c>
    174a:	b9 2f       	mov	r27, r25
    174c:	99 27       	eor	r25, r25
    174e:	b7 51       	subi	r27, 0x17	; 23
    1750:	a0 f0       	brcs	.+40     	; 0x177a <__fixunssfsi+0x38>
    1752:	d1 f0       	breq	.+52     	; 0x1788 <__fixunssfsi+0x46>
    1754:	66 0f       	add	r22, r22
    1756:	77 1f       	adc	r23, r23
    1758:	88 1f       	adc	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	1a f0       	brmi	.+6      	; 0x1764 <__fixunssfsi+0x22>
    175e:	ba 95       	dec	r27
    1760:	c9 f7       	brne	.-14     	; 0x1754 <__fixunssfsi+0x12>
    1762:	12 c0       	rjmp	.+36     	; 0x1788 <__fixunssfsi+0x46>
    1764:	b1 30       	cpi	r27, 0x01	; 1
    1766:	81 f0       	breq	.+32     	; 0x1788 <__fixunssfsi+0x46>
    1768:	9f d0       	rcall	.+318    	; 0x18a8 <__fp_zero>
    176a:	b1 e0       	ldi	r27, 0x01	; 1
    176c:	08 95       	ret
    176e:	9c c0       	rjmp	.+312    	; 0x18a8 <__fp_zero>
    1770:	67 2f       	mov	r22, r23
    1772:	78 2f       	mov	r23, r24
    1774:	88 27       	eor	r24, r24
    1776:	b8 5f       	subi	r27, 0xF8	; 248
    1778:	39 f0       	breq	.+14     	; 0x1788 <__fixunssfsi+0x46>
    177a:	b9 3f       	cpi	r27, 0xF9	; 249
    177c:	cc f3       	brlt	.-14     	; 0x1770 <__fixunssfsi+0x2e>
    177e:	86 95       	lsr	r24
    1780:	77 95       	ror	r23
    1782:	67 95       	ror	r22
    1784:	b3 95       	inc	r27
    1786:	d9 f7       	brne	.-10     	; 0x177e <__fixunssfsi+0x3c>
    1788:	3e f4       	brtc	.+14     	; 0x1798 <__fixunssfsi+0x56>
    178a:	90 95       	com	r25
    178c:	80 95       	com	r24
    178e:	70 95       	com	r23
    1790:	61 95       	neg	r22
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	8f 4f       	sbci	r24, 0xFF	; 255
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	08 95       	ret

0000179a <__floatunsisf>:
    179a:	e8 94       	clt
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <__floatsisf+0x12>

0000179e <__floatsisf>:
    179e:	97 fb       	bst	r25, 7
    17a0:	3e f4       	brtc	.+14     	; 0x17b0 <__floatsisf+0x12>
    17a2:	90 95       	com	r25
    17a4:	80 95       	com	r24
    17a6:	70 95       	com	r23
    17a8:	61 95       	neg	r22
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8f 4f       	sbci	r24, 0xFF	; 255
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	99 23       	and	r25, r25
    17b2:	a9 f0       	breq	.+42     	; 0x17de <__floatsisf+0x40>
    17b4:	f9 2f       	mov	r31, r25
    17b6:	96 e9       	ldi	r25, 0x96	; 150
    17b8:	bb 27       	eor	r27, r27
    17ba:	93 95       	inc	r25
    17bc:	f6 95       	lsr	r31
    17be:	87 95       	ror	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	b7 95       	ror	r27
    17c6:	f1 11       	cpse	r31, r1
    17c8:	f8 cf       	rjmp	.-16     	; 0x17ba <__floatsisf+0x1c>
    17ca:	fa f4       	brpl	.+62     	; 0x180a <__floatsisf+0x6c>
    17cc:	bb 0f       	add	r27, r27
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <__floatsisf+0x36>
    17d0:	60 ff       	sbrs	r22, 0
    17d2:	1b c0       	rjmp	.+54     	; 0x180a <__floatsisf+0x6c>
    17d4:	6f 5f       	subi	r22, 0xFF	; 255
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	16 c0       	rjmp	.+44     	; 0x180a <__floatsisf+0x6c>
    17de:	88 23       	and	r24, r24
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <__floatsisf+0x48>
    17e2:	96 e9       	ldi	r25, 0x96	; 150
    17e4:	11 c0       	rjmp	.+34     	; 0x1808 <__floatsisf+0x6a>
    17e6:	77 23       	and	r23, r23
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <__floatsisf+0x54>
    17ea:	9e e8       	ldi	r25, 0x8E	; 142
    17ec:	87 2f       	mov	r24, r23
    17ee:	76 2f       	mov	r23, r22
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <__floatsisf+0x5e>
    17f2:	66 23       	and	r22, r22
    17f4:	71 f0       	breq	.+28     	; 0x1812 <__floatsisf+0x74>
    17f6:	96 e8       	ldi	r25, 0x86	; 134
    17f8:	86 2f       	mov	r24, r22
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	2a f0       	brmi	.+10     	; 0x180a <__floatsisf+0x6c>
    1800:	9a 95       	dec	r25
    1802:	66 0f       	add	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	da f7       	brpl	.-10     	; 0x1800 <__floatsisf+0x62>
    180a:	88 0f       	add	r24, r24
    180c:	96 95       	lsr	r25
    180e:	87 95       	ror	r24
    1810:	97 f9       	bld	r25, 7
    1812:	08 95       	ret

00001814 <__fp_inf>:
    1814:	97 f9       	bld	r25, 7
    1816:	9f 67       	ori	r25, 0x7F	; 127
    1818:	80 e8       	ldi	r24, 0x80	; 128
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	08 95       	ret

00001820 <__fp_nan>:
    1820:	9f ef       	ldi	r25, 0xFF	; 255
    1822:	80 ec       	ldi	r24, 0xC0	; 192
    1824:	08 95       	ret

00001826 <__fp_pscA>:
    1826:	00 24       	eor	r0, r0
    1828:	0a 94       	dec	r0
    182a:	16 16       	cp	r1, r22
    182c:	17 06       	cpc	r1, r23
    182e:	18 06       	cpc	r1, r24
    1830:	09 06       	cpc	r0, r25
    1832:	08 95       	ret

00001834 <__fp_pscB>:
    1834:	00 24       	eor	r0, r0
    1836:	0a 94       	dec	r0
    1838:	12 16       	cp	r1, r18
    183a:	13 06       	cpc	r1, r19
    183c:	14 06       	cpc	r1, r20
    183e:	05 06       	cpc	r0, r21
    1840:	08 95       	ret

00001842 <__fp_round>:
    1842:	09 2e       	mov	r0, r25
    1844:	03 94       	inc	r0
    1846:	00 0c       	add	r0, r0
    1848:	11 f4       	brne	.+4      	; 0x184e <__fp_round+0xc>
    184a:	88 23       	and	r24, r24
    184c:	52 f0       	brmi	.+20     	; 0x1862 <__fp_round+0x20>
    184e:	bb 0f       	add	r27, r27
    1850:	40 f4       	brcc	.+16     	; 0x1862 <__fp_round+0x20>
    1852:	bf 2b       	or	r27, r31
    1854:	11 f4       	brne	.+4      	; 0x185a <__fp_round+0x18>
    1856:	60 ff       	sbrs	r22, 0
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <__fp_round+0x20>
    185a:	6f 5f       	subi	r22, 0xFF	; 255
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	8f 4f       	sbci	r24, 0xFF	; 255
    1860:	9f 4f       	sbci	r25, 0xFF	; 255
    1862:	08 95       	ret

00001864 <__fp_split3>:
    1864:	57 fd       	sbrc	r21, 7
    1866:	90 58       	subi	r25, 0x80	; 128
    1868:	44 0f       	add	r20, r20
    186a:	55 1f       	adc	r21, r21
    186c:	59 f0       	breq	.+22     	; 0x1884 <__fp_splitA+0x10>
    186e:	5f 3f       	cpi	r21, 0xFF	; 255
    1870:	71 f0       	breq	.+28     	; 0x188e <__fp_splitA+0x1a>
    1872:	47 95       	ror	r20

00001874 <__fp_splitA>:
    1874:	88 0f       	add	r24, r24
    1876:	97 fb       	bst	r25, 7
    1878:	99 1f       	adc	r25, r25
    187a:	61 f0       	breq	.+24     	; 0x1894 <__fp_splitA+0x20>
    187c:	9f 3f       	cpi	r25, 0xFF	; 255
    187e:	79 f0       	breq	.+30     	; 0x189e <__fp_splitA+0x2a>
    1880:	87 95       	ror	r24
    1882:	08 95       	ret
    1884:	12 16       	cp	r1, r18
    1886:	13 06       	cpc	r1, r19
    1888:	14 06       	cpc	r1, r20
    188a:	55 1f       	adc	r21, r21
    188c:	f2 cf       	rjmp	.-28     	; 0x1872 <__fp_split3+0xe>
    188e:	46 95       	lsr	r20
    1890:	f1 df       	rcall	.-30     	; 0x1874 <__fp_splitA>
    1892:	08 c0       	rjmp	.+16     	; 0x18a4 <__fp_splitA+0x30>
    1894:	16 16       	cp	r1, r22
    1896:	17 06       	cpc	r1, r23
    1898:	18 06       	cpc	r1, r24
    189a:	99 1f       	adc	r25, r25
    189c:	f1 cf       	rjmp	.-30     	; 0x1880 <__fp_splitA+0xc>
    189e:	86 95       	lsr	r24
    18a0:	71 05       	cpc	r23, r1
    18a2:	61 05       	cpc	r22, r1
    18a4:	08 94       	sec
    18a6:	08 95       	ret

000018a8 <__fp_zero>:
    18a8:	e8 94       	clt

000018aa <__fp_szero>:
    18aa:	bb 27       	eor	r27, r27
    18ac:	66 27       	eor	r22, r22
    18ae:	77 27       	eor	r23, r23
    18b0:	cb 01       	movw	r24, r22
    18b2:	97 f9       	bld	r25, 7
    18b4:	08 95       	ret

000018b6 <__mulsf3>:
    18b6:	0b d0       	rcall	.+22     	; 0x18ce <__mulsf3x>
    18b8:	c4 cf       	rjmp	.-120    	; 0x1842 <__fp_round>
    18ba:	b5 df       	rcall	.-150    	; 0x1826 <__fp_pscA>
    18bc:	28 f0       	brcs	.+10     	; 0x18c8 <__mulsf3+0x12>
    18be:	ba df       	rcall	.-140    	; 0x1834 <__fp_pscB>
    18c0:	18 f0       	brcs	.+6      	; 0x18c8 <__mulsf3+0x12>
    18c2:	95 23       	and	r25, r21
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <__mulsf3+0x12>
    18c6:	a6 cf       	rjmp	.-180    	; 0x1814 <__fp_inf>
    18c8:	ab cf       	rjmp	.-170    	; 0x1820 <__fp_nan>
    18ca:	11 24       	eor	r1, r1
    18cc:	ee cf       	rjmp	.-36     	; 0x18aa <__fp_szero>

000018ce <__mulsf3x>:
    18ce:	ca df       	rcall	.-108    	; 0x1864 <__fp_split3>
    18d0:	a0 f3       	brcs	.-24     	; 0x18ba <__mulsf3+0x4>

000018d2 <__mulsf3_pse>:
    18d2:	95 9f       	mul	r25, r21
    18d4:	d1 f3       	breq	.-12     	; 0x18ca <__mulsf3+0x14>
    18d6:	95 0f       	add	r25, r21
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	55 1f       	adc	r21, r21
    18dc:	62 9f       	mul	r22, r18
    18de:	f0 01       	movw	r30, r0
    18e0:	72 9f       	mul	r23, r18
    18e2:	bb 27       	eor	r27, r27
    18e4:	f0 0d       	add	r31, r0
    18e6:	b1 1d       	adc	r27, r1
    18e8:	63 9f       	mul	r22, r19
    18ea:	aa 27       	eor	r26, r26
    18ec:	f0 0d       	add	r31, r0
    18ee:	b1 1d       	adc	r27, r1
    18f0:	aa 1f       	adc	r26, r26
    18f2:	64 9f       	mul	r22, r20
    18f4:	66 27       	eor	r22, r22
    18f6:	b0 0d       	add	r27, r0
    18f8:	a1 1d       	adc	r26, r1
    18fa:	66 1f       	adc	r22, r22
    18fc:	82 9f       	mul	r24, r18
    18fe:	22 27       	eor	r18, r18
    1900:	b0 0d       	add	r27, r0
    1902:	a1 1d       	adc	r26, r1
    1904:	62 1f       	adc	r22, r18
    1906:	73 9f       	mul	r23, r19
    1908:	b0 0d       	add	r27, r0
    190a:	a1 1d       	adc	r26, r1
    190c:	62 1f       	adc	r22, r18
    190e:	83 9f       	mul	r24, r19
    1910:	a0 0d       	add	r26, r0
    1912:	61 1d       	adc	r22, r1
    1914:	22 1f       	adc	r18, r18
    1916:	74 9f       	mul	r23, r20
    1918:	33 27       	eor	r19, r19
    191a:	a0 0d       	add	r26, r0
    191c:	61 1d       	adc	r22, r1
    191e:	23 1f       	adc	r18, r19
    1920:	84 9f       	mul	r24, r20
    1922:	60 0d       	add	r22, r0
    1924:	21 1d       	adc	r18, r1
    1926:	82 2f       	mov	r24, r18
    1928:	76 2f       	mov	r23, r22
    192a:	6a 2f       	mov	r22, r26
    192c:	11 24       	eor	r1, r1
    192e:	9f 57       	subi	r25, 0x7F	; 127
    1930:	50 40       	sbci	r21, 0x00	; 0
    1932:	8a f0       	brmi	.+34     	; 0x1956 <__mulsf3_pse+0x84>
    1934:	e1 f0       	breq	.+56     	; 0x196e <__mulsf3_pse+0x9c>
    1936:	88 23       	and	r24, r24
    1938:	4a f0       	brmi	.+18     	; 0x194c <__mulsf3_pse+0x7a>
    193a:	ee 0f       	add	r30, r30
    193c:	ff 1f       	adc	r31, r31
    193e:	bb 1f       	adc	r27, r27
    1940:	66 1f       	adc	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	91 50       	subi	r25, 0x01	; 1
    1948:	50 40       	sbci	r21, 0x00	; 0
    194a:	a9 f7       	brne	.-22     	; 0x1936 <__mulsf3_pse+0x64>
    194c:	9e 3f       	cpi	r25, 0xFE	; 254
    194e:	51 05       	cpc	r21, r1
    1950:	70 f0       	brcs	.+28     	; 0x196e <__mulsf3_pse+0x9c>
    1952:	60 cf       	rjmp	.-320    	; 0x1814 <__fp_inf>
    1954:	aa cf       	rjmp	.-172    	; 0x18aa <__fp_szero>
    1956:	5f 3f       	cpi	r21, 0xFF	; 255
    1958:	ec f3       	brlt	.-6      	; 0x1954 <__mulsf3_pse+0x82>
    195a:	98 3e       	cpi	r25, 0xE8	; 232
    195c:	dc f3       	brlt	.-10     	; 0x1954 <__mulsf3_pse+0x82>
    195e:	86 95       	lsr	r24
    1960:	77 95       	ror	r23
    1962:	67 95       	ror	r22
    1964:	b7 95       	ror	r27
    1966:	f7 95       	ror	r31
    1968:	e7 95       	ror	r30
    196a:	9f 5f       	subi	r25, 0xFF	; 255
    196c:	c1 f7       	brne	.-16     	; 0x195e <__mulsf3_pse+0x8c>
    196e:	fe 2b       	or	r31, r30
    1970:	88 0f       	add	r24, r24
    1972:	91 1d       	adc	r25, r1
    1974:	96 95       	lsr	r25
    1976:	87 95       	ror	r24
    1978:	97 f9       	bld	r25, 7
    197a:	08 95       	ret

0000197c <__udivmodsi4>:
    197c:	a1 e2       	ldi	r26, 0x21	; 33
    197e:	1a 2e       	mov	r1, r26
    1980:	aa 1b       	sub	r26, r26
    1982:	bb 1b       	sub	r27, r27
    1984:	fd 01       	movw	r30, r26
    1986:	0d c0       	rjmp	.+26     	; 0x19a2 <__udivmodsi4_ep>

00001988 <__udivmodsi4_loop>:
    1988:	aa 1f       	adc	r26, r26
    198a:	bb 1f       	adc	r27, r27
    198c:	ee 1f       	adc	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	a2 17       	cp	r26, r18
    1992:	b3 07       	cpc	r27, r19
    1994:	e4 07       	cpc	r30, r20
    1996:	f5 07       	cpc	r31, r21
    1998:	20 f0       	brcs	.+8      	; 0x19a2 <__udivmodsi4_ep>
    199a:	a2 1b       	sub	r26, r18
    199c:	b3 0b       	sbc	r27, r19
    199e:	e4 0b       	sbc	r30, r20
    19a0:	f5 0b       	sbc	r31, r21

000019a2 <__udivmodsi4_ep>:
    19a2:	66 1f       	adc	r22, r22
    19a4:	77 1f       	adc	r23, r23
    19a6:	88 1f       	adc	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	1a 94       	dec	r1
    19ac:	69 f7       	brne	.-38     	; 0x1988 <__udivmodsi4_loop>
    19ae:	60 95       	com	r22
    19b0:	70 95       	com	r23
    19b2:	80 95       	com	r24
    19b4:	90 95       	com	r25
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	bd 01       	movw	r22, r26
    19bc:	cf 01       	movw	r24, r30
    19be:	08 95       	ret

000019c0 <__divmodsi4>:
    19c0:	05 2e       	mov	r0, r21
    19c2:	97 fb       	bst	r25, 7
    19c4:	16 f4       	brtc	.+4      	; 0x19ca <__divmodsi4+0xa>
    19c6:	00 94       	com	r0
    19c8:	0f d0       	rcall	.+30     	; 0x19e8 <__negsi2>
    19ca:	57 fd       	sbrc	r21, 7
    19cc:	05 d0       	rcall	.+10     	; 0x19d8 <__divmodsi4_neg2>
    19ce:	d6 df       	rcall	.-84     	; 0x197c <__udivmodsi4>
    19d0:	07 fc       	sbrc	r0, 7
    19d2:	02 d0       	rcall	.+4      	; 0x19d8 <__divmodsi4_neg2>
    19d4:	46 f4       	brtc	.+16     	; 0x19e6 <__divmodsi4_exit>
    19d6:	08 c0       	rjmp	.+16     	; 0x19e8 <__negsi2>

000019d8 <__divmodsi4_neg2>:
    19d8:	50 95       	com	r21
    19da:	40 95       	com	r20
    19dc:	30 95       	com	r19
    19de:	21 95       	neg	r18
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	4f 4f       	sbci	r20, 0xFF	; 255
    19e4:	5f 4f       	sbci	r21, 0xFF	; 255

000019e6 <__divmodsi4_exit>:
    19e6:	08 95       	ret

000019e8 <__negsi2>:
    19e8:	90 95       	com	r25
    19ea:	80 95       	com	r24
    19ec:	70 95       	com	r23
    19ee:	61 95       	neg	r22
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255
    19f2:	8f 4f       	sbci	r24, 0xFF	; 255
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	08 95       	ret

000019f8 <__muluhisi3>:
    19f8:	09 d0       	rcall	.+18     	; 0x1a0c <__umulhisi3>
    19fa:	a5 9f       	mul	r26, r21
    19fc:	90 0d       	add	r25, r0
    19fe:	b4 9f       	mul	r27, r20
    1a00:	90 0d       	add	r25, r0
    1a02:	a4 9f       	mul	r26, r20
    1a04:	80 0d       	add	r24, r0
    1a06:	91 1d       	adc	r25, r1
    1a08:	11 24       	eor	r1, r1
    1a0a:	08 95       	ret

00001a0c <__umulhisi3>:
    1a0c:	a2 9f       	mul	r26, r18
    1a0e:	b0 01       	movw	r22, r0
    1a10:	b3 9f       	mul	r27, r19
    1a12:	c0 01       	movw	r24, r0
    1a14:	a3 9f       	mul	r26, r19
    1a16:	01 d0       	rcall	.+2      	; 0x1a1a <__umulhisi3+0xe>
    1a18:	b2 9f       	mul	r27, r18
    1a1a:	70 0d       	add	r23, r0
    1a1c:	81 1d       	adc	r24, r1
    1a1e:	11 24       	eor	r1, r1
    1a20:	91 1d       	adc	r25, r1
    1a22:	08 95       	ret

00001a24 <_exit>:
    1a24:	f8 94       	cli

00001a26 <__stop_program>:
    1a26:	ff cf       	rjmp	.-2      	; 0x1a26 <__stop_program>
